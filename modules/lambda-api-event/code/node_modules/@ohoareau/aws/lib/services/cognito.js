"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const awscog = new (require('aws-sdk/clients/cognitoidentityserviceprovider'));
const createUser = async ({ userPool, username, attributes }) => {
    const response = await awscog.adminCreateUser({
        UserPoolId: userPool,
        Username: username,
        DesiredDeliveryMediums: ['EMAIL'],
        ForceAliasCreation: false,
        UserAttributes: (Object.entries(attributes).reduce((acc, [k, v]) => {
            acc.push({ Name: k, Value: ('boolean' === typeof v) ? (!!v ? 'True' : 'False') : v });
            return acc;
        }, [])),
    }).promise();
    return Object.assign({}, {
        ...response.User,
        id: response.User.Attributes.find(a => a.Name === 'sub').Value,
        username: response.User.Username,
    });
};
const addUserToGroupByUsername = async ({ group, userPool, username }) => awscog.adminAddUserToGroup({
    GroupName: group, UserPoolId: userPool, Username: username,
}).promise();
const addUserToGroupsByUsername = async ({ userPool, groups, username }) => Promise.all(groups.map(async (group) => addUserToGroupByUsername({ group, userPool, username })));
const getUser = async ({ userPool, id }) => {
    const { Users: users } = await awscog.listUsers({
        UserPoolId: userPool, Filter: `sub = "${id}"`, Limit: 1,
    }).promise();
    if (!users || !users.length)
        throw new Error(`Unknown user '${id}'`);
    const user = users[0];
    user.id = id;
    user.username = user.Username;
    return user;
};
const deleteUserByUsername = async ({ userPool, username }) => awscog.adminDeleteUser({ UserPoolId: userPool, Username: username }).promise();
const deleteUser = async ({ userPool, id }) => deleteUserByUsername({ userPool, username: (await getUser({ userPool, id })).username });
exports.cognito = {
    createUser,
    addUserToGroupByUsername,
    addUserToGroupsByUsername,
    getUser,
    deleteUser,
    deleteUserByUsername,
};
exports.default = exports.cognito;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9jb2duaXRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDLENBQUM7QUFFL0UsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUMsRUFBRSxFQUFFO0lBQzFELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQztRQUMxQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUUsUUFBUTtRQUNsQixzQkFBc0IsRUFBRSxDQUFDLE9BQU8sQ0FBQztRQUNqQyxrQkFBa0IsRUFBRSxLQUFLO1FBQ3pCLGNBQWMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDL0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsU0FBUyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztZQUNwRixPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsRUFBUyxFQUFFLENBQUMsQ0FBQztLQUNqQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDYixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQ3JCLEdBQUcsUUFBUSxDQUFDLElBQUk7UUFDaEIsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSztRQUM5RCxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRO0tBQ25DLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQztBQUNGLE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0lBQy9GLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUTtDQUM3RCxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDYixNQUFNLHlCQUF5QixHQUFHLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWxHLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUMsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQzVDLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7S0FDMUQsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLEVBQUUsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUN4RCxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDL0U7QUFDRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsRUFBQyxRQUFRLEVBQUUsRUFBRSxFQUFDLEVBQUUsRUFBRSxDQUN4QyxvQkFBb0IsQ0FBQyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FDdkY7QUFFWSxRQUFBLE9BQU8sR0FBRztJQUNuQixVQUFVO0lBQ1Ysd0JBQXdCO0lBQ3hCLHlCQUF5QjtJQUN6QixPQUFPO0lBQ1AsVUFBVTtJQUNWLG9CQUFvQjtDQUN2QixDQUFBO0FBRUQsa0JBQWUsZUFBTyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXdzY29nID0gbmV3IChyZXF1aXJlKCdhd3Mtc2RrL2NsaWVudHMvY29nbml0b2lkZW50aXR5c2VydmljZXByb3ZpZGVyJykpO1xuXG5jb25zdCBjcmVhdGVVc2VyID0gYXN5bmMgKHt1c2VyUG9vbCwgdXNlcm5hbWUsIGF0dHJpYnV0ZXN9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhd3Njb2cuYWRtaW5DcmVhdGVVc2VyKHtcbiAgICAgICAgVXNlclBvb2xJZDogdXNlclBvb2wsXG4gICAgICAgIFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgRGVzaXJlZERlbGl2ZXJ5TWVkaXVtczogWydFTUFJTCddLFxuICAgICAgICBGb3JjZUFsaWFzQ3JlYXRpb246IGZhbHNlLFxuICAgICAgICBVc2VyQXR0cmlidXRlczogKE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+IHtcbiAgICAgICAgICAgIGFjYy5wdXNoKHtOYW1lOiBrLCBWYWx1ZTogKCdib29sZWFuJyA9PT0gdHlwZW9mIHYpID8gKCEhdiA/ICdUcnVlJyA6ICdGYWxzZScpIDogdn0pO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgPGFueVtdPltdKSksXG4gICAgfSkucHJvbWlzZSgpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgIC4uLnJlc3BvbnNlLlVzZXIsXG4gICAgICAgIGlkOiByZXNwb25zZS5Vc2VyLkF0dHJpYnV0ZXMuZmluZChhID0+IGEuTmFtZSA9PT0gJ3N1YicpLlZhbHVlLFxuICAgICAgICB1c2VybmFtZTogcmVzcG9uc2UuVXNlci5Vc2VybmFtZSxcbiAgICB9KTtcbn07XG5jb25zdCBhZGRVc2VyVG9Hcm91cEJ5VXNlcm5hbWUgPSBhc3luYyAoe2dyb3VwLCB1c2VyUG9vbCwgdXNlcm5hbWV9KSA9PiBhd3Njb2cuYWRtaW5BZGRVc2VyVG9Hcm91cCh7XG4gICAgR3JvdXBOYW1lOiBncm91cCwgVXNlclBvb2xJZDogdXNlclBvb2wsIFVzZXJuYW1lOiB1c2VybmFtZSxcbn0pLnByb21pc2UoKTtcbmNvbnN0IGFkZFVzZXJUb0dyb3Vwc0J5VXNlcm5hbWUgPSBhc3luYyAoe3VzZXJQb29sLCBncm91cHMsIHVzZXJuYW1lfSkgPT5cbiAgICBQcm9taXNlLmFsbChncm91cHMubWFwKGFzeW5jIGdyb3VwID0+IGFkZFVzZXJUb0dyb3VwQnlVc2VybmFtZSh7Z3JvdXAsIHVzZXJQb29sLCB1c2VybmFtZX0pKSk7XG5cbmNvbnN0IGdldFVzZXIgPSBhc3luYyAoe3VzZXJQb29sLCBpZH0pID0+IHtcbiAgICBjb25zdCB7IFVzZXJzOiB1c2VycyB9ID0gYXdhaXQgYXdzY29nLmxpc3RVc2Vycyh7XG4gICAgICAgIFVzZXJQb29sSWQ6IHVzZXJQb29sLCBGaWx0ZXI6IGBzdWIgPSBcIiR7aWR9XCJgLCBMaW1pdDogMSxcbiAgICB9KS5wcm9taXNlKCk7XG4gICAgaWYgKCF1c2VycyB8fCAhdXNlcnMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdXNlciAnJHtpZH0nYCk7XG4gICAgY29uc3QgdXNlciA9IHVzZXJzWzBdO1xuICAgIHVzZXIuaWQgPSBpZDtcbiAgICB1c2VyLnVzZXJuYW1lID0gdXNlci5Vc2VybmFtZTtcbiAgICByZXR1cm4gdXNlcjtcbn07XG5jb25zdCBkZWxldGVVc2VyQnlVc2VybmFtZSA9IGFzeW5jICh7dXNlclBvb2wsIHVzZXJuYW1lfSkgPT5cbiAgICBhd3Njb2cuYWRtaW5EZWxldGVVc2VyKHtVc2VyUG9vbElkOiB1c2VyUG9vbCwgVXNlcm5hbWU6IHVzZXJuYW1lfSkucHJvbWlzZSgpXG47XG5jb25zdCBkZWxldGVVc2VyID0gYXN5bmMgKHt1c2VyUG9vbCwgaWR9KSA9PlxuICAgIGRlbGV0ZVVzZXJCeVVzZXJuYW1lKHt1c2VyUG9vbCwgdXNlcm5hbWU6IChhd2FpdCBnZXRVc2VyKHt1c2VyUG9vbCwgaWR9KSkudXNlcm5hbWV9KVxuO1xuXG5leHBvcnQgY29uc3QgY29nbml0byA9IHtcbiAgICBjcmVhdGVVc2VyLFxuICAgIGFkZFVzZXJUb0dyb3VwQnlVc2VybmFtZSxcbiAgICBhZGRVc2VyVG9Hcm91cHNCeVVzZXJuYW1lLFxuICAgIGdldFVzZXIsXG4gICAgZGVsZXRlVXNlcixcbiAgICBkZWxldGVVc2VyQnlVc2VybmFtZSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29nbml0byJdfQ==
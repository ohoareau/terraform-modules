"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buildDataFromEvent_1 = require("./buildDataFromEvent");
const testRoute_1 = __importDefault(require("./testRoute"));
function getRequestInfosFromEvent(event, routes = []) {
    const path = `${(((event || {})['requestContext'] || {})['http'] || {})['path']}`;
    const method = `${(((event || {})['requestContext'] || {})['http'] || {})['method'] || 'unknown'}`.toUpperCase();
    const data = buildDataFromEvent_1.buildDataFromEvent(event);
    const resourcePath = `${method} ${path}`;
    const [uri, y = undefined] = path.split('?');
    const params = {};
    new URLSearchParams(`?${y || ''}`).forEach((k, v) => {
        params[k] = v;
    });
    const testedRoutes = [...routes];
    let r;
    let found = undefined;
    const qsParams = Object.entries((event === null || event === void 0 ? void 0 : event.queryStringParameters) || {}).reduce((acc, [k, v]) => {
        if (!v)
            return acc;
        if (-1 === v.indexOf(',')) {
            acc[k] = v;
            return acc;
        }
        acc[k] = v.split(/,/g);
        return acc;
    }, {});
    const headers = Object.entries((event === null || event === void 0 ? void 0 : event.headers) || {}).reduce((acc, [k, v]) => {
        if (!v)
            return acc;
        if (-1 === v.indexOf(',')) {
            acc[k] = v;
            return acc;
        }
        acc[k] = v.split(/,/g);
        return acc;
    }, {});
    const request = { uri, path, resourcePath, method, params, data, qsParams, headers };
    do {
        r = testedRoutes.shift();
        if (!r)
            break;
        const match = testRoute_1.default(r, request);
        if (match) {
            found = { route: r, params: { ...(match || {}), ...(r.params || {}) } };
        }
    } while (!found && testedRoutes.length);
    if (found) {
        request['route'] = { ...found['route'] };
        request['params'] = { ...request['params'], ...found['params'] };
    }
    return request;
}
exports.getRequestInfosFromEvent = getRequestInfosFromEvent;
exports.default = getRequestInfosFromEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UmVxdWVzdEluZm9zRnJvbUV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2dldFJlcXVlc3RJbmZvc0Zyb21FdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDZEQUF3RDtBQUN4RCw0REFBb0M7QUFFcEMsU0FBZ0Isd0JBQXdCLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxFQUFFO0lBQ3ZELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNsRixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pILE1BQU0sSUFBSSxHQUFHLHVDQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sWUFBWSxHQUFHLEdBQUcsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDO0lBRXpDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7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L3R5cGVzJztcbmltcG9ydCB7YnVpbGREYXRhRnJvbUV2ZW50fSBmcm9tIFwiLi9idWlsZERhdGFGcm9tRXZlbnRcIjtcbmltcG9ydCB0ZXN0Um91dGUgZnJvbSBcIi4vdGVzdFJvdXRlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXF1ZXN0SW5mb3NGcm9tRXZlbnQoZXZlbnQsIHJvdXRlcyA9IFtdKTogaHR0cF9yZXF1ZXN0IHtcbiAgICBjb25zdCBwYXRoID0gYCR7KCgoZXZlbnQgfHwge30pWydyZXF1ZXN0Q29udGV4dCddIHx8IHt9KVsnaHR0cCddIHx8IHt9KVsncGF0aCddfWA7XG4gICAgY29uc3QgbWV0aG9kID0gYCR7KCgoZXZlbnQgfHwge30pWydyZXF1ZXN0Q29udGV4dCddIHx8IHt9KVsnaHR0cCddIHx8IHt9KVsnbWV0aG9kJ10gfHwgJ3Vua25vd24nfWAudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCBkYXRhID0gYnVpbGREYXRhRnJvbUV2ZW50KGV2ZW50KTtcbiAgICBjb25zdCByZXNvdXJjZVBhdGggPSBgJHttZXRob2R9ICR7cGF0aH1gO1xuXG4gICAgY29uc3QgW3VyaSwgeSA9IHVuZGVmaW5lZF0gPSBwYXRoLnNwbGl0KCc/Jyk7XG4gICAgY29uc3QgcGFyYW1zID0ge307XG4gICAgbmV3IFVSTFNlYXJjaFBhcmFtcyhgPyR7eSB8fCAnJ31gKS5mb3JFYWNoKChrLCB2KSA9PiB7XG4gICAgICAgIHBhcmFtc1trXSA9IHY7XG4gICAgfSk7XG4gICAgY29uc3QgdGVzdGVkUm91dGVzOiByb3V0ZVtdID0gWy4uLnJvdXRlc107XG4gICAgbGV0IHI6IHJvdXRlfHVuZGVmaW5lZDtcbiAgICBsZXQgZm91bmQ6IGFueSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBxc1BhcmFtcyA9IE9iamVjdC5lbnRyaWVzKGV2ZW50Py5xdWVyeVN0cmluZ1BhcmFtZXRlcnMgfHwge30pLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+IHtcbiAgICAgICAgaWYgKCF2KSByZXR1cm4gYWNjO1xuICAgICAgICBpZiAoLTEgPT09ICh2IGFzIHN0cmluZykuaW5kZXhPZignLCcpKSB7XG4gICAgICAgICAgICBhY2Nba10gPSB2O1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2Nba10gPSAodiBhcyBzdHJpbmcpLnNwbGl0KC8sL2cpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmVudHJpZXMoZXZlbnQ/LmhlYWRlcnMgfHwge30pLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+IHtcbiAgICAgICAgaWYgKCF2KSByZXR1cm4gYWNjO1xuICAgICAgICBpZiAoLTEgPT09ICh2IGFzIHN0cmluZykuaW5kZXhPZignLCcpKSB7XG4gICAgICAgICAgICBhY2Nba10gPSB2O1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2Nba10gPSAodiBhcyBzdHJpbmcpLnNwbGl0KC8sL2cpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCByZXF1ZXN0ID0ge3VyaSwgcGF0aCwgcmVzb3VyY2VQYXRoLCBtZXRob2QsIHBhcmFtcywgZGF0YSwgcXNQYXJhbXMsIGhlYWRlcnN9IGFzIGh0dHBfcmVxdWVzdDtcbiAgICBkbyB7XG4gICAgICAgIHIgPSB0ZXN0ZWRSb3V0ZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKCFyKSBicmVhaztcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0ZXN0Um91dGUociwgcmVxdWVzdCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZm91bmQgPSB7cm91dGU6IHIsIHBhcmFtczogey4uLihtYXRjaCB8fCB7fSksIC4uLihyLnBhcmFtcyB8fCB7fSl9fTtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKCFmb3VuZCAmJiB0ZXN0ZWRSb3V0ZXMubGVuZ3RoKTtcbiAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgcmVxdWVzdFsncm91dGUnXSA9IHsuLi5mb3VuZFsncm91dGUnXX07XG4gICAgICAgIHJlcXVlc3RbJ3BhcmFtcyddID0gey4uLnJlcXVlc3RbJ3BhcmFtcyddLCAuLi5mb3VuZFsncGFyYW1zJ119O1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmVxdWVzdEluZm9zRnJvbUV2ZW50Il19
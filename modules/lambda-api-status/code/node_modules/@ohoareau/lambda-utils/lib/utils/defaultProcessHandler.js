"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const defaultActions = __importStar(require("../actions"));
async function defaultProcessHandler(ctx) {
    var _a, _b, _c, _d, _e;
    const actions = { ...defaultActions, ...(((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.actions) || {}) };
    const route = ctx.request.route;
    const action = actions[(route === null || route === void 0 ? void 0 : route.type) || ((_b = ctx.request.route) === null || _b === void 0 ? void 0 : _b.name) || ((_c = ctx.config) === null || _c === void 0 ? void 0 : _c.defaultRouteType) || 'default'] || actions[((_d = ctx.config) === null || _d === void 0 ? void 0 : _d.defaultRouteType) || 'default'];
    if (!action)
        return ctx.helpers.httpNotFound();
    const rawResponse = await action(ctx);
    const response = ('undefined' !== typeof (rawResponse === null || rawResponse === void 0 ? void 0 : rawResponse.isBase64Encoded)) ? rawResponse : await ctx.helpers.http(rawResponse);
    return {
        ...response,
        headers: {
            'Cache-Control': ((_e = ctx.config) === null || _e === void 0 ? void 0 : _e.defaultCache) || 'no-cache',
            ...(ctx.config.defaultHeaders || {}),
            ...((route === null || route === void 0 ? void 0 : route.headers) || {}),
            ...((route === null || route === void 0 ? void 0 : route.cache) ? { 'Cache-Control': route.cache } : {}),
            ...(response.headers || {}),
        }
    };
}
exports.defaultProcessHandler = defaultProcessHandler;
exports.default = defaultProcessHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdFByb2Nlc3NIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2RlZmF1bHRQcm9jZXNzSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwyREFBNkM7QUFHdEMsS0FBSyxVQUFVLHFCQUFxQixDQUFDLEdBQVE7O0lBQ2hELE1BQU0sT0FBTyxHQUFHLEVBQUMsR0FBRyxjQUFjLEVBQUUsR0FBRyxDQUFDLE9BQUEsR0FBRyxDQUFDLE1BQU0sMENBQUUsT0FBTyxLQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFDcEUsTUFBTSxLQUFLLEdBQW9CLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2pELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxJQUFJLFlBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLDBDQUFFLElBQUksQ0FBQSxXQUFJLEdBQUcsQ0FBQyxNQUFNLDBDQUFFLGdCQUFnQixDQUFBLElBQUksU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQUEsR0FBRyxDQUFDLE1BQU0sMENBQUUsZ0JBQWdCLEtBQUksU0FBUyxDQUFDLENBQUM7SUFDbEssSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDL0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxXQUFXLEtBQUssUUFBTyxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsZUFBZSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNILE9BQU87UUFDSCxHQUFHLFFBQVE7UUFDWCxPQUFPLEVBQUU7WUFDTCxlQUFlLEVBQUUsT0FBQSxHQUFHLENBQUMsTUFBTSwwQ0FBRSxZQUFZLEtBQUksVUFBVTtZQUN2RCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO1lBQ3BDLEdBQUcsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLEtBQUksRUFBRSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLEVBQUMsZUFBZSxFQUFFLEtBQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hELEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUM5QjtLQUNKLENBQUM7QUFDTixDQUFDO0FBakJELHNEQWlCQztBQUVELGtCQUFlLHFCQUFxQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZGVmYXVsdEFjdGlvbnMgZnJvbSBcIi4uL2FjdGlvbnNcIjtcbmltcG9ydCB7Y3R4LCByb3V0ZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVmYXVsdFByb2Nlc3NIYW5kbGVyKGN0eDogY3R4KSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IHsuLi5kZWZhdWx0QWN0aW9ucywgLi4uKGN0eC5jb25maWc/LmFjdGlvbnMgfHwge30pfTtcbiAgICBjb25zdCByb3V0ZTogcm91dGV8dW5kZWZpbmVkID0gY3R4LnJlcXVlc3Qucm91dGU7XG4gICAgY29uc3QgYWN0aW9uID0gYWN0aW9uc1tyb3V0ZT8udHlwZSB8fCBjdHgucmVxdWVzdC5yb3V0ZT8ubmFtZSB8fCBjdHguY29uZmlnPy5kZWZhdWx0Um91dGVUeXBlIHx8ICdkZWZhdWx0J10gfHwgYWN0aW9uc1tjdHguY29uZmlnPy5kZWZhdWx0Um91dGVUeXBlIHx8ICdkZWZhdWx0J107XG4gICAgaWYgKCFhY3Rpb24pIHJldHVybiBjdHguaGVscGVycy5odHRwTm90Rm91bmQoKTtcbiAgICBjb25zdCByYXdSZXNwb25zZSA9IGF3YWl0IGFjdGlvbihjdHgpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgcmF3UmVzcG9uc2U/LmlzQmFzZTY0RW5jb2RlZCkgPyByYXdSZXNwb25zZSA6IGF3YWl0IGN0eC5oZWxwZXJzLmh0dHAocmF3UmVzcG9uc2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6IGN0eC5jb25maWc/LmRlZmF1bHRDYWNoZSB8fCAnbm8tY2FjaGUnLCAvLyB0aGlzIGRlZmF1bHQgdmFsdWUgY2FuIGJlIG92ZXJyaWRlbiBhdCBtdWx0aXBsZSBsZXZlbHNcbiAgICAgICAgICAgIC4uLihjdHguY29uZmlnLmRlZmF1bHRIZWFkZXJzIHx8IHt9KSwgLy8gdGhlc2UgaGVhZGVycyBhcmUgYXV0b21hdGljYWxseSBzZXRcbiAgICAgICAgICAgIC4uLihyb3V0ZT8uaGVhZGVycyB8fCB7fSksXG4gICAgICAgICAgICAuLi4ocm91dGU/LmNhY2hlID8geydDYWNoZS1Db250cm9sJzogcm91dGUhLmNhY2hlfSA6IHt9KSxcbiAgICAgICAgICAgIC4uLihyZXNwb25zZS5oZWFkZXJzIHx8IHt9KSxcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRQcm9jZXNzSGFuZGxlciJdfQ==
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers = __importStar(require("../responses"));
const getLambdaConfig_1 = __importDefault(require("./getLambdaConfig"));
const getRequestInfosFromEvent_1 = __importDefault(require("./getRequestInfosFromEvent"));
const mergeConfig_1 = __importDefault(require("./mergeConfig"));
const defaultProcessHandler_1 = __importDefault(require("./defaultProcessHandler"));
function createRouterHandler(defaultConfig = {}, customProcessHandler = undefined) {
    return async function (event, context) {
        var _a, _b, _c;
        try {
            const config = mergeConfig_1.default(await getLambdaConfig_1.default(), defaultConfig);
            const request = getRequestInfosFromEvent_1.default(event, config['routes']);
            const ctx = {
                request,
                config,
                helpers,
                event,
                context,
                query: {
                    ...(request.params || {}),
                    ...(request.data ? { data: request.data || {} } : {}),
                },
            };
            try {
                if ((config['statics'] || {})[request.uri]) {
                    const staticInfos = config['statics'][request.uri];
                    return helpers.staticFile({
                        root: config.root,
                        ...staticInfos,
                        headers: {
                            ...(((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.defaultStaticsHeaders) || {}),
                            ...(staticInfos.headers || {})
                        }
                    });
                }
            }
            catch (e1) {
                return helpers.httpError({ error: e1, phase: 'static' });
            }
            try {
                return await (customProcessHandler || defaultProcessHandler_1.default)(ctx);
            }
            catch (e) {
                return helpers.httpError({
                    error: e,
                    phase: 'process',
                    headers: {
                        ...(((_b = request.route) === null || _b === void 0 ? void 0 : _b.name) ? { 'X-Error-Route-Name': request.route.name } : {}),
                        ...(((_c = request.route) === null || _c === void 0 ? void 0 : _c.type) ? { 'X-Error-Route-Type': request.route.type } : {}),
                    }
                });
            }
        }
        catch (e0) {
            return helpers.httpError({ error: e0, phase: 'init' });
        }
    };
}
exports.createRouterHandler = createRouterHandler;
exports.default = createRouterHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUm91dGVySGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jcmVhdGVSb3V0ZXJIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHNEQUF3QztBQUN4Qyx3RUFBZ0Q7QUFDaEQsMEZBQWtFO0FBRWxFLGdFQUF3QztBQUN4QyxvRkFBNEQ7QUFFNUQsU0FBZ0IsbUJBQW1CLENBQUMsZ0JBQXFCLEVBQUUsRUFBRSx1QkFBK0QsU0FBUztJQUNqSSxPQUFPLEtBQUssV0FBVyxLQUFLLEVBQUUsT0FBTzs7UUFDakMsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLHFCQUFXLENBQUMsTUFBTSx5QkFBZSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDbkUsTUFBTSxPQUFPLEdBQUcsa0NBQXdCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sR0FBRyxHQUFHO2dCQUNSLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixPQUFPO2dCQUNQLEtBQUs7Z0JBQ0wsT0FBTztnQkFDUCxLQUFLLEVBQUU7b0JBQ0gsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO29CQUN6QixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUN0RDthQUNKLENBQUM7WUFFRixJQUFJO2dCQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUN4QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNuRCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUM7d0JBQ3RCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTt3QkFDakIsR0FBRyxXQUFXO3dCQUNkLE9BQU8sRUFBRTs0QkFDTCxHQUFHLENBQUMsT0FBQSxHQUFHLENBQUMsTUFBTSwwQ0FBRSxxQkFBcUIsS0FBSSxFQUFFLENBQUM7NEJBQzVDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQzt5QkFDakM7cUJBQ0osQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDVCxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsSUFBSTtnQkFFQSxPQUFPLE1BQU0sQ0FBQyxvQkFBb0IsSUFBSSwrQkFBcUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3JFO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1IsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDO29CQUNyQixLQUFLLEVBQUUsQ0FBQztvQkFDUixLQUFLLEVBQUUsU0FBUztvQkFDaEIsT0FBTyxFQUFFO3dCQUNMLEdBQUcsQ0FBQyxPQUFBLE9BQU8sQ0FBQyxLQUFLLDBDQUFFLElBQUksRUFBQyxDQUFDLENBQUMsRUFBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsS0FBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7d0JBQzNFLEdBQUcsQ0FBQyxPQUFBLE9BQU8sQ0FBQyxLQUFLLDBDQUFFLElBQUksRUFBQyxDQUFDLENBQUMsRUFBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsS0FBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7cUJBQzlFO2lCQUNKLENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNULE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDLENBQUE7QUFDTCxDQUFDO0FBbkRELGtEQW1EQztBQUVELGtCQUFlLG1CQUFtQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuLi9yZXNwb25zZXMnO1xuaW1wb3J0IGdldExhbWJkYUNvbmZpZyBmcm9tIFwiLi9nZXRMYW1iZGFDb25maWdcIjtcbmltcG9ydCBnZXRSZXF1ZXN0SW5mb3NGcm9tRXZlbnQgZnJvbSBcIi4vZ2V0UmVxdWVzdEluZm9zRnJvbUV2ZW50XCI7XG5pbXBvcnQge2N0eH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4vbWVyZ2VDb25maWdcIjtcbmltcG9ydCBkZWZhdWx0UHJvY2Vzc0hhbmRsZXIgZnJvbSBcIi4vZGVmYXVsdFByb2Nlc3NIYW5kbGVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJIYW5kbGVyKGRlZmF1bHRDb25maWc6IGFueSA9IHt9LCBjdXN0b21Qcm9jZXNzSGFuZGxlcjogKChjdHg6IGN0eCkgPT4gUHJvbWlzZTxhbnk+KXx1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBtZXJnZUNvbmZpZyhhd2FpdCBnZXRMYW1iZGFDb25maWcoKSwgZGVmYXVsdENvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gZ2V0UmVxdWVzdEluZm9zRnJvbUV2ZW50KGV2ZW50LCBjb25maWdbJ3JvdXRlcyddKTtcblxuICAgICAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGhlbHBlcnMsXG4gICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAuLi4ocmVxdWVzdC5wYXJhbXMgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAuLi4ocmVxdWVzdC5kYXRhID8ge2RhdGE6IHJlcXVlc3QuZGF0YSB8fCB7fX0gOiB7fSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKChjb25maWdbJ3N0YXRpY3MnXSB8fCB7fSlbcmVxdWVzdC51cmldKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY0luZm9zID0gY29uZmlnWydzdGF0aWNzJ11bcmVxdWVzdC51cmldO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5zdGF0aWNGaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IGNvbmZpZy5yb290LFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGljSW5mb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGN0eC5jb25maWc/LmRlZmF1bHRTdGF0aWNzSGVhZGVycyB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHN0YXRpY0luZm9zLmhlYWRlcnMgfHwge30pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuaHR0cEVycm9yKHtlcnJvcjogZTEsIHBoYXNlOiAnc3RhdGljJ30pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGRvIHRoZSBgYXdhaXRgIGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRvIGNhdGNoIGVycm9yIGhlcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgKGN1c3RvbVByb2Nlc3NIYW5kbGVyIHx8IGRlZmF1bHRQcm9jZXNzSGFuZGxlcikoY3R4KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5odHRwRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZSxcbiAgICAgICAgICAgICAgICAgICAgcGhhc2U6ICdwcm9jZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHJlcXVlc3Qucm91dGU/Lm5hbWUgPyB7J1gtRXJyb3ItUm91dGUtTmFtZSc6IHJlcXVlc3Qucm91dGUhLm5hbWV9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHJlcXVlc3Qucm91dGU/LnR5cGUgPyB7J1gtRXJyb3ItUm91dGUtVHlwZSc6IHJlcXVlc3Qucm91dGUhLnR5cGV9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUwKSB7XG4gICAgICAgICAgICByZXR1cm4gaGVscGVycy5odHRwRXJyb3Ioe2Vycm9yOiBlMCwgcGhhc2U6ICdpbml0J30pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSb3V0ZXJIYW5kbGVyIl19
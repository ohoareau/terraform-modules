"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const renderer_1 = require("@react-pdf/renderer");
const TableRow_1 = __importDefault(require("./TableRow"));
const hocs_1 = require("../../hocs");
const prepareColumns = (columns) => {
    const n = columns.length;
    const columnsRow = { id: 'headers' };
    const spans = columns.reduce((x, c) => x + (c.span || 1), 0);
    const ratioForOne = n > 0 ? (1 / spans) : 1;
    const columnsData = columns.map(c => {
        columnsRow[c.id] = c.label;
        return { width: `${ratioForOne * (c.span || 1) * 100}%`, ...c };
    });
    return [columnsRow, columnsData];
};
exports.Table = hocs_1.pdfComponent({
    table: {
        display: 'table',
        width: 'auto',
    },
}, ({ s = () => { }, headers = true, title = undefined, rows = [], columns = [] }) => {
    const [columnsRow, columnsData] = prepareColumns(columns);
    headers && (rows = [columnsRow, ...rows]);
    return (react_1.default.createElement(renderer_1.View, { style: s('table') },
        !!title && react_1.default.createElement(TableRow_1.default, { header: true, row: { title }, columns: [{ id: 'title', width: '100%' }] }),
        rows.map((row, i) => react_1.default.createElement(TableRow_1.default, { key: row.id || i, rowIndex: headers ? (i - 1) : i, header: headers && (i === 0), row: row, columns: columnsData }))));
});
exports.default = exports.Table;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2tzL3RhYmxlL1RhYmxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQixrREFBeUM7QUFDekMsMERBQWtDO0FBQ2xDLHFDQUF3QztBQUV4QyxNQUFNLGNBQWMsR0FBRyxDQUFDLE9BQWMsRUFBZ0IsRUFBRTtJQUNwRCxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3pCLE1BQU0sVUFBVSxHQUFHLEVBQUMsRUFBRSxFQUFFLFNBQVMsRUFBQyxDQUFDO0lBQ25DLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdELE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNoQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDM0IsT0FBTyxFQUFDLEtBQUssRUFBRSxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRVcsUUFBQSxLQUFLLEdBQUcsbUJBQVksQ0FBYTtJQUMxQyxLQUFLLEVBQUU7UUFDSCxPQUFPLEVBQUUsT0FBTztRQUNoQixLQUFLLEVBQUUsTUFBTTtLQUNoQjtDQUNKLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxLQUFLLEdBQUcsU0FBUyxFQUFFLElBQUksR0FBRyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBYyxFQUFFLEVBQUU7SUFDM0YsTUFBTSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUQsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMxQyxPQUFPLENBQ0gsOEJBQUMsZUFBSSxJQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxLQUFLLElBQUksOEJBQUMsa0JBQVEsSUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUMsR0FBSTtRQUM1RixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsOEJBQUMsa0JBQVEsSUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsR0FBSSxDQUFDLENBQ2pKLENBQ1YsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBVUgsa0JBQWUsYUFBSyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Vmlld30gZnJvbSAnQHJlYWN0LXBkZi9yZW5kZXJlcic7XG5pbXBvcnQgVGFibGVSb3cgZnJvbSAnLi9UYWJsZVJvdyc7XG5pbXBvcnQge3BkZkNvbXBvbmVudH0gZnJvbSAnLi4vLi4vaG9jcyc7XG5cbmNvbnN0IHByZXBhcmVDb2x1bW5zID0gKGNvbHVtbnM6IGFueVtdKTogW2FueSwgYW55W11dID0+IHtcbiAgICBjb25zdCBuID0gY29sdW1ucy5sZW5ndGg7XG4gICAgY29uc3QgY29sdW1uc1JvdyA9IHtpZDogJ2hlYWRlcnMnfTtcbiAgICBjb25zdCBzcGFucyA9IGNvbHVtbnMucmVkdWNlKCh4LCBjKSA9PiB4ICsgKGMuc3BhbiB8fCAxKSwgMCk7XG4gICAgY29uc3QgcmF0aW9Gb3JPbmUgPSBuID4gMCA/ICgxIC8gc3BhbnMpIDogMTtcbiAgICBjb25zdCBjb2x1bW5zRGF0YSA9IGNvbHVtbnMubWFwKGMgPT4ge1xuICAgICAgICBjb2x1bW5zUm93W2MuaWRdID0gYy5sYWJlbDtcbiAgICAgICAgcmV0dXJuIHt3aWR0aDogYCR7cmF0aW9Gb3JPbmUgKiAoYy5zcGFuIHx8IDEpICogMTAwfSVgLCAuLi5jfTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbHVtbnNSb3csIGNvbHVtbnNEYXRhXTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWJsZSA9IHBkZkNvbXBvbmVudDxUYWJsZVByb3BzPih7XG4gICAgdGFibGU6IHtcbiAgICAgICAgZGlzcGxheTogJ3RhYmxlJyxcbiAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICB9LFxufSwgKHtzID0gKCkgPT4ge30sIGhlYWRlcnMgPSB0cnVlLCB0aXRsZSA9IHVuZGVmaW5lZCwgcm93cyA9IFtdLCBjb2x1bW5zID0gW119IDogVGFibGVQcm9wcykgPT4ge1xuICAgIGNvbnN0IFtjb2x1bW5zUm93LCBjb2x1bW5zRGF0YV0gPSBwcmVwYXJlQ29sdW1ucyhjb2x1bW5zKTtcbiAgICBoZWFkZXJzICYmIChyb3dzID0gW2NvbHVtbnNSb3csIC4uLnJvd3NdKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8VmlldyBzdHlsZT17cygndGFibGUnKX0+XG4gICAgICAgICAgICB7ISF0aXRsZSAmJiA8VGFibGVSb3cgaGVhZGVyPXt0cnVlfSByb3c9e3t0aXRsZX19IGNvbHVtbnM9e1t7aWQ6ICd0aXRsZScsIHdpZHRoOiAnMTAwJSd9XX0gLz59XG4gICAgICAgICAgICB7cm93cy5tYXAoKHJvdywgaSkgPT4gPFRhYmxlUm93IGtleT17cm93LmlkIHx8IGl9IHJvd0luZGV4PXtoZWFkZXJzID8gKGkgLSAxKSA6IGl9IGhlYWRlcj17aGVhZGVycyAmJiAoaSA9PT0gMCl9IHJvdz17cm93fSBjb2x1bW5zPXtjb2x1bW5zRGF0YX0gLz4pfVxuICAgICAgICA8L1ZpZXc+XG4gICAgKTtcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUHJvcHMge1xuICAgIHM/OiBGdW5jdGlvbixcbiAgICB0aXRsZT8sXG4gICAgaGVhZGVycz8sXG4gICAgcm93czogYW55W10sXG4gICAgY29sdW1uczogYW55W10sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlIl19
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const renderer_1 = require("@react-pdf/renderer");
const hocs_1 = require("./hocs");
const coreBlocks = __importStar(require("./blocks"));
const ContextContext_1 = require("./contexts/ContextContext");
const buildingBlocks = __importStar(require("./plugins/building/blocks"));
const blocks = { core: coreBlocks, building: buildingBlocks };
const SelectionWrapper = hocs_1.pdfComponent({
    selection_wrapper: {
        backgroundColor: '#3f51b5',
        color: 'white',
    },
}, ({ s = () => { }, children }) => (react_1.default.createElement(renderer_1.View, { style: s('selection_wrapper') }, children)));
const renderBlock = (key, block, Component, props, cfg, context, test, suggestions) => {
    if (block.hiddable && !cfg.visible)
        return null;
    if (block.condition && !test(block.condition))
        return null;
    let c = react_1.default.createElement(Component, Object.assign({ key: key, block: block }, props));
    if (block.enrichable && cfg.enrichment)
        c = (react_1.default.createElement(react_1.default.Fragment, null,
            c,
            cfg.enrichment.map((en, i) => react_1.default.createElement(Block, { key: i, id: `${block.id}_enrichment_${i}`, block: { type: en.type, text: en.children.map(x => x.text).join("\n") } }))));
    if (block.suggestions && cfg.suggestions)
        c = (react_1.default.createElement(react_1.default.Fragment, null,
            c,
            Object.entries(cfg.suggestions).map(([k, v], i) => suggestions[k] ? react_1.default.createElement(Block, { key: i, id: `${block.id}_suggestion_${k}`, block: suggestions[k] }) : null)));
    context && (c = react_1.default.createElement(ContextContext_1.ContextProvider, { key: key, value: context || {} }, c));
    if (cfg.selected)
        c = react_1.default.createElement(SelectionWrapper, { key: key }, c);
    if (block.pagebreak)
        c = react_1.default.createElement(renderer_1.Text, { key: key, wrap: true, break: true }, c);
    return c;
};
const Block = hocs_1.pdfComponent(undefined, ({ id, block, cfg = {}, v = () => { }, suggestions = {}, test = () => { }, model, ...props }) => {
    const tokens = (block.type || '').split(':');
    let items, key;
    switch (tokens.length) {
        case 0:
            items = blocks.core;
            key = 'unknown';
            break;
        case 1:
            items = blocks.core;
            key = block.type;
            break;
        default:
            items = ('@' === tokens[0].charAt(0))
                ? require(`./plugins/${tokens[0].slice(1)}/blocks`)
                : require(`${tokens[0]}/blocks`);
            key = tokens[1];
            break;
    }
    const Component = (items || {})[key] || blocks.core.unknown;
    if (block.foreach) {
        return (react_1.default.createElement(react_1.default.Fragment, null, (v(block.foreach) || []).map((context, i) => renderBlock(i, block, Component, props, cfg, context, test, suggestions))));
    }
    return renderBlock(undefined, block, Component, props, cfg, undefined, test, suggestions);
});
exports.default = Block;
//# sourceMappingURL=data:application/json;base64,
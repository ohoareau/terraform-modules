"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lambda_utils_1 = require("@ohoareau/lambda-utils");
const availableSources = __importStar(require("../sources"));
const xlsx_1 = __importDefault(require("xlsx"));
async function render(def) {
    const wb = xlsx_1.default.utils.book_new();
    return xlsx_1.default.write(wb, { type: 'buffer' });
}
async function generate(ctx) {
    const sources = { ...availableSources, ...(ctx.config.sources || {}) };
    const sourceName = ctx.query.source || 'default';
    const source = sources[sourceName];
    if (!source)
        return ctx.helpers.httpNotFound();
    const sourced = (await source(ctx)) || {};
    if (!sourced || !sourced.definition)
        return ctx.helpers.httpNotFound();
    try {
        return ctx.helpers.buffer({ contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ...sourced, buffer: await render(sourced.definition) });
    }
    catch (e) {
        throw new lambda_utils_1.UnderlyingExecutionError(e, 'generate', { sourceName });
    }
}
exports.generate = generate;
exports.default = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWN0aW9ucy9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx5REFBb0Y7QUFDcEYsNkRBQStDO0FBQy9DLGdEQUF3QjtBQUV4QixLQUFLLFVBQVUsTUFBTSxDQUFDLEdBQVE7SUFDMUIsTUFBTSxFQUFFLEdBQUcsY0FBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUVqQyxPQUFPLGNBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVNLEtBQUssVUFBVSxRQUFRLENBQUMsR0FBUTtJQUNuQyxNQUFNLE9BQU8sR0FBRyxFQUFDLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFDckUsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDO0lBQ2pELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMvQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtRQUFFLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN2RSxJQUFJO1FBQ0EsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFDLFdBQVcsRUFBRSxtRUFBbUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQztLQUN2SztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxJQUFJLHVDQUF3QixDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDO0tBQ25FO0FBQ0wsQ0FBQztBQVpELDRCQVlDO0FBRUQsa0JBQWUsUUFBUSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjdHgsIGh0dHBfcmVzcG9uc2UsIFVuZGVybHlpbmdFeGVjdXRpb25FcnJvcn0gZnJvbSBcIkBvaG9hcmVhdS9sYW1iZGEtdXRpbHNcIjtcbmltcG9ydCAqIGFzIGF2YWlsYWJsZVNvdXJjZXMgZnJvbSBcIi4uL3NvdXJjZXNcIjtcbmltcG9ydCBYTFNYIGZyb20gJ3hsc3gnO1xuXG5hc3luYyBmdW5jdGlvbiByZW5kZXIoZGVmOiBhbnkpIHtcbiAgICBjb25zdCB3YiA9IFhMU1gudXRpbHMuYm9va19uZXcoKTtcbiAgICAvLyBAdG9kb1xuICAgIHJldHVybiBYTFNYLndyaXRlKHdiLCB7dHlwZTogJ2J1ZmZlcid9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlKGN0eDogY3R4KTogUHJvbWlzZTxodHRwX3Jlc3BvbnNlPiB7XG4gICAgY29uc3Qgc291cmNlcyA9IHsuLi5hdmFpbGFibGVTb3VyY2VzLCAuLi4oY3R4LmNvbmZpZy5zb3VyY2VzIHx8IHt9KX07XG4gICAgY29uc3Qgc291cmNlTmFtZSA9IGN0eC5xdWVyeS5zb3VyY2UgfHwgJ2RlZmF1bHQnO1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbc291cmNlTmFtZV07XG4gICAgaWYgKCFzb3VyY2UpIHJldHVybiBjdHguaGVscGVycy5odHRwTm90Rm91bmQoKTtcbiAgICBjb25zdCBzb3VyY2VkID0gKGF3YWl0IHNvdXJjZShjdHgpKSB8fCB7fTtcbiAgICBpZiAoIXNvdXJjZWQgfHwgIXNvdXJjZWQuZGVmaW5pdGlvbikgcmV0dXJuIGN0eC5oZWxwZXJzLmh0dHBOb3RGb3VuZCgpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjdHguaGVscGVycy5idWZmZXIoe2NvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQnLCAuLi5zb3VyY2VkLCBidWZmZXI6IGF3YWl0IHJlbmRlcihzb3VyY2VkLmRlZmluaXRpb24pfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgVW5kZXJseWluZ0V4ZWN1dGlvbkVycm9yKGUsICdnZW5lcmF0ZScsIHtzb3VyY2VOYW1lfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZSJdfQ==
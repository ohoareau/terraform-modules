"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const renderer_1 = require("@react-pdf/renderer");
const HeadingBlock_1 = __importDefault(require("./HeadingBlock"));
const hocs_1 = require("../hocs");
const unified = require('unified');
const markdown = require('remark-parse');
const convertTokens = (tokens, opts = {}) => {
    const s = opts.s;
    const v = opts.v;
    return tokens.map((t, i) => {
        switch (t.type) {
            case 'heading': return (react_1.default.createElement(HeadingBlock_1.default, { key: i, block: { level: t.depth } }, convertTokens(t.children || [], { ...opts, first: false })));
            case 'paragraph': return (react_1.default.createElement(renderer_1.Text, { key: i, style: s(['paragraph', opts.first && 'paragraph_first']) }, convertTokens(t.children || [], { ...opts, first: false })));
            case 'text': return opts.dynamic
                ? react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_text'), render: vars => {
                        return v(t.value, vars);
                    } })
                : (react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_text') }, v(t.value)));
            case 'link': return (react_1.default.createElement(renderer_1.Link, { key: i, src: t.url, style: s('paragraph_link') }, !!t.children.length ? convertTokens(t.children, { ...opts, first: false }) : t.url));
            case 'emphasis': return (react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_emphasis') }, convertTokens(t.children || [], { ...opts, first: false })));
            case 'strong': return (react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_strong') }, convertTokens(t.children || [], { ...opts, first: false })));
            case 'delete': return (react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_underlined') }, convertTokens(t.children || [], { ...opts, first: false })));
            case 'inlineCode': return (react_1.default.createElement(renderer_1.Text, { key: i, style: s('paragraph_inline_code') }, v(t.value)));
            default: return react_1.default.createElement(react_1.Fragment, { key: i });
        }
    });
};
exports.ParagraphBlock = hocs_1.pdfComponent(undefined, ({ dynamic = false, s = () => { }, v = () => { }, block }) => (react_1.default.createElement(react_1.default.Fragment, null, convertTokens(unified().use(markdown).parse(block.text || '').children, { first: !block.pseudo, dynamic, s, v }))));
exports.default = exports.ParagraphBlock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFyYWdyYXBoQmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmxvY2tzL1BhcmFncmFwaEJsb2NrLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBc0M7QUFDdEMsa0RBQStDO0FBQy9DLGtFQUEwQztBQUMxQyxrQ0FBcUM7QUFFckMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV6QyxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWEsRUFBRSxPQUFZLEVBQUUsRUFBRSxFQUFFO0lBQ3BELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkIsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ1osS0FBSyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQ25CLDhCQUFDLHNCQUFZLElBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBQyxJQUN4QyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsRUFBQyxHQUFHLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FDOUMsQ0FDbEIsQ0FBQztZQUNGLEtBQUssV0FBVyxDQUFDLENBQUMsT0FBTyxDQUNyQiw4QkFBQyxlQUFJLElBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksaUJBQWlCLENBQUMsQ0FBQyxJQUNqRSxhQUFhLENBQUMs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QUFFLENBQUMsRUFBRSxLQUFLLEVBQXNCLEVBQUUsRUFBRSxDQUFDLENBQ3RKLDhEQUNLLGFBQWEsQ0FDVixPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxFQUN4RCxFQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FDeEMsQ0FDRixDQUNOLENBQUMsQ0FBQztBQVNILGtCQUFlLHNCQUFjLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtGcmFnbWVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMaW5rLCBUZXh0fSBmcm9tICdAcmVhY3QtcGRmL3JlbmRlcmVyJztcbmltcG9ydCBIZWFkaW5nQmxvY2sgZnJvbSAnLi9IZWFkaW5nQmxvY2snO1xuaW1wb3J0IHtwZGZDb21wb25lbnR9IGZyb20gJy4uL2hvY3MnO1xuXG5jb25zdCB1bmlmaWVkID0gcmVxdWlyZSgndW5pZmllZCcpO1xuY29uc3QgbWFya2Rvd24gPSByZXF1aXJlKCdyZW1hcmstcGFyc2UnKTtcblxuY29uc3QgY29udmVydFRva2VucyA9ICh0b2tlbnM6IGFueVtdLCBvcHRzOiBhbnkgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHMgPSBvcHRzLnM7XG4gICAgY29uc3QgdiA9IG9wdHMudjtcbiAgICByZXR1cm4gdG9rZW5zLm1hcCgodCwgaSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnaGVhZGluZyc6IHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEhlYWRpbmdCbG9jayBrZXk9e2l9IGJsb2NrPXt7bGV2ZWw6IHQuZGVwdGh9fT5cbiAgICAgICAgICAgICAgICAgICAge2NvbnZlcnRUb2tlbnModC5jaGlsZHJlbiB8fCBbXSwgey4uLm9wdHMsIGZpcnN0OiBmYWxzZX0pfVxuICAgICAgICAgICAgICAgIDwvSGVhZGluZ0Jsb2NrPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgJ3BhcmFncmFwaCc6IHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRleHQga2V5PXtpfSBzdHlsZT17cyhbJ3BhcmFncmFwaCcsIG9wdHMuZmlyc3QgJiYgJ3BhcmFncmFwaF9maXJzdCddKX0+XG4gICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0VG9rZW5zKHQuY2hpbGRyZW4gfHwgW10sIHsuLi5vcHRzLCBmaXJzdDogZmFsc2V9KX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSAndGV4dCc6IHJldHVybiBvcHRzLmR5bmFtaWNcbiAgICAgICAgICAgICAgICA/IDxUZXh0IGtleT17aX0gc3R5bGU9e3MoJ3BhcmFncmFwaF90ZXh0Jyl9IHJlbmRlcj17dmFycyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2KHQudmFsdWUsIHZhcnMpXG4gICAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgICAgICAgPFRleHQga2V5PXtpfSBzdHlsZT17cygncGFyYWdyYXBoX3RleHQnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dih0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGNhc2UgJ2xpbmsnOiByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxMaW5rIGtleT17aX0gc3JjPXt0LnVybH0gc3R5bGU9e3MoJ3BhcmFncmFwaF9saW5rJyl9PlxuICAgICAgICAgICAgICAgICAgICB7ISF0LmNoaWxkcmVuLmxlbmd0aCA/IGNvbnZlcnRUb2tlbnModC5jaGlsZHJlbiwgey4uLm9wdHMsIGZpcnN0OiBmYWxzZX0pIDogdC51cmx9XG4gICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgJ2VtcGhhc2lzJzogcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8VGV4dCBrZXk9e2l9IHN0eWxlPXtzKCdwYXJhZ3JhcGhfZW1waGFzaXMnKX0+XG4gICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0VG9rZW5zKHQuY2hpbGRyZW4gfHwgW10sIHsuLi5vcHRzLCBmaXJzdDogZmFsc2V9KX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSAnc3Ryb25nJzogcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8VGV4dCBrZXk9e2l9IHN0eWxlPXtzKCdwYXJhZ3JhcGhfc3Ryb25nJyl9PlxuICAgICAgICAgICAgICAgICAgICB7Y29udmVydFRva2Vucyh0LmNoaWxkcmVuIHx8IFtdLCB7Li4ub3B0cywgZmlyc3Q6IGZhbHNlfSl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6IHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRleHQga2V5PXtpfSBzdHlsZT17cygncGFyYWdyYXBoX3VuZGVybGluZWQnKX0+XG4gICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0VG9rZW5zKHQuY2hpbGRyZW4gfHwgW10sIHsuLi5vcHRzLCBmaXJzdDogZmFsc2V9KX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSAnaW5saW5lQ29kZSc6IHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRleHQga2V5PXtpfSBzdHlsZT17cygncGFyYWdyYXBoX2lubGluZV9jb2RlJyl9PlxuICAgICAgICAgICAgICAgICAgICB7dih0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDxGcmFnbWVudCBrZXk9e2l9Lz47XG4gICAgICAgIH1cbiAgICB9KVxufTtcblxuZXhwb3J0IGNvbnN0IFBhcmFncmFwaEJsb2NrID0gcGRmQ29tcG9uZW50PFBhcmFncmFwaEJsb2NrUHJvcHM+KHVuZGVmaW5lZCwgKHtkeW5hbWljID0gZmFsc2UsIHMgPSAoKSA9PiB7fSwgdiA9ICgpID0+IHt9LCBibG9ja306IFBhcmFncmFwaEJsb2NrUHJvcHMpID0+IChcbiAgICA8PlxuICAgICAgICB7Y29udmVydFRva2VucyhcbiAgICAgICAgICAgIHVuaWZpZWQoKS51c2UobWFya2Rvd24pLnBhcnNlKGJsb2NrLnRleHQgfHwgJycpLmNoaWxkcmVuLFxuICAgICAgICAgICAge2ZpcnN0OiAhYmxvY2sucHNldWRvLCBkeW5hbWljLCBzLCB2fVxuICAgICAgICApfVxuICAgIDwvPlxuKSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyYWdyYXBoQmxvY2tQcm9wcyB7XG4gICAgcz86IEZ1bmN0aW9uLFxuICAgIHY/OiBGdW5jdGlvbixcbiAgICBkeW5hbWljPzogYm9vbGVhbixcbiAgICBibG9jazogYW55LFxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXJhZ3JhcGhCbG9jayJdfQ==
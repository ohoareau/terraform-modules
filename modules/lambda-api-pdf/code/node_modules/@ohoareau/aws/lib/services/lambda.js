"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@ohoareau/errors");
const awslambda = new (require('aws-sdk/clients/lambda'));
const execute = async (arn, payload, options = {}) => {
    options = { async: false, ...options };
    const logger = ((options ? options['logger'] : undefined) || console);
    logger.log(`Invoking lambda '${arn}' with`, payload);
    const result = await awslambda.invoke({
        FunctionName: arn,
        InvocationType: !!options['async'] ? 'Event' : 'RequestResponse',
        LogType: 'None',
        Payload: JSON.stringify(payload),
    }).promise();
    const responsePayload = JSON.parse(result.Payload ? (result.Payload.toString ? result.Payload.toString() : result.Payload) : '{}');
    if (result.FunctionError)
        throw new errors_1.InvokeError('?', '?', arn, payload, responsePayload);
    logger.log(`Lambda '${arn}' ${!!options['async'] ? 'called asynchronously ' : ''}responded '${result.StatusCode}' with: `, responsePayload || result);
    return responsePayload;
};
exports.lambda = { execute };
exports.default = exports.lambda;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2VzL2xhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUE2QztBQUM3QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUUxRCxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDakQsT0FBTyxHQUFHLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sRUFBQyxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUM7SUFDdEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckQsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ2xDLFlBQVksRUFBRSxHQUFHO1FBQ2pCLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjtRQUNoRSxPQUFPLEVBQUUsTUFBTTtRQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztLQUNuQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDYixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkksSUFBSSxNQUFNLENBQUMsYUFBYTtRQUFFLE1BQU0sSUFBSSxvQkFBVyxDQUMzQyxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxPQUFPLEVBQ1AsZUFBZSxDQUNsQixDQUFDO0lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLE1BQU0sQ0FBQyxVQUFVLFVBQVUsRUFBRSxlQUFlLElBQUksTUFBTSxDQUFDLENBQUM7SUFDdEosT0FBTyxlQUFlLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRVcsUUFBQSxNQUFNLEdBQUcsRUFBQyxPQUFPLEVBQUMsQ0FBQTtBQUUvQixrQkFBZSxjQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ludm9rZUVycm9yfSBmcm9tICdAb2hvYXJlYXUvZXJyb3JzJztcbmNvbnN0IGF3c2xhbWJkYSA9IG5ldyAocmVxdWlyZSgnYXdzLXNkay9jbGllbnRzL2xhbWJkYScpKTtcblxuY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChhcm4sIHBheWxvYWQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIG9wdGlvbnMgPSB7YXN5bmM6IGZhbHNlLCAuLi5vcHRpb25zfTtcbiAgICBjb25zdCBsb2dnZXIgPSAoKG9wdGlvbnMgPyBvcHRpb25zWydsb2dnZXInXSA6IHVuZGVmaW5lZCkgfHwgY29uc29sZSk7XG4gICAgbG9nZ2VyLmxvZyhgSW52b2tpbmcgbGFtYmRhICcke2Fybn0nIHdpdGhgLCBwYXlsb2FkKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhd3NsYW1iZGEuaW52b2tlKHtcbiAgICAgICAgRnVuY3Rpb25OYW1lOiBhcm4sXG4gICAgICAgIEludm9jYXRpb25UeXBlOiAhIW9wdGlvbnNbJ2FzeW5jJ10gPyAnRXZlbnQnIDogJ1JlcXVlc3RSZXNwb25zZScsXG4gICAgICAgIExvZ1R5cGU6ICdOb25lJyxcbiAgICAgICAgUGF5bG9hZDogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXG4gICAgfSkucHJvbWlzZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlUGF5bG9hZCA9IEpTT04ucGFyc2UocmVzdWx0LlBheWxvYWQgPyAocmVzdWx0LlBheWxvYWQudG9TdHJpbmcgPyByZXN1bHQuUGF5bG9hZC50b1N0cmluZygpIDogcmVzdWx0LlBheWxvYWQpIDogJ3t9Jyk7XG4gICAgaWYgKHJlc3VsdC5GdW5jdGlvbkVycm9yKSB0aHJvdyBuZXcgSW52b2tlRXJyb3IoXG4gICAgICAgICc/JyxcbiAgICAgICAgJz8nLFxuICAgICAgICBhcm4sXG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIHJlc3BvbnNlUGF5bG9hZFxuICAgICk7XG4gICAgbG9nZ2VyLmxvZyhgTGFtYmRhICcke2Fybn0nICR7ISFvcHRpb25zWydhc3luYyddID8gJ2NhbGxlZCBhc3luY2hyb25vdXNseSAnIDogJyd9cmVzcG9uZGVkICcke3Jlc3VsdC5TdGF0dXNDb2RlfScgd2l0aDogYCwgcmVzcG9uc2VQYXlsb2FkIHx8IHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlUGF5bG9hZDtcbn07XG5cbmV4cG9ydCBjb25zdCBsYW1iZGEgPSB7ZXhlY3V0ZX1cblxuZXhwb3J0IGRlZmF1bHQgbGFtYmRhIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const awscf = new (require('aws-sdk/clients/cloudfront'))({ region: process.env.AWS_CLOUDFRONT_REGION || process.env.AWS_REGION });
const createInvalidation = async (distribution, uri, invalidationReference) => {
    const uris = Array.isArray(uri) ? uri : [uri];
    return awscf.createInvalidation({
        DistributionId: distribution,
        InvalidationBatch: {
            CallerReference: invalidationReference || uuid_1.v4(),
            Paths: {
                Quantity: uris.length,
                Items: uris,
            }
        }
    }).promise();
};
const invalidateUri = async (distribution, uri, invalidationReference) => createInvalidation(distribution, uri, invalidationReference);
exports.cloudfront = {
    invalidateUri,
    createInvalidation,
};
exports.default = exports.cloudfront;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmcm9udC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9jbG91ZGZyb250LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQWdDO0FBQ2hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDO0FBRWpJLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUFFLFlBQVksRUFBRSxHQUFvQixFQUFFLHFCQUE4QixFQUFnQixFQUFFO0lBQ2xILE1BQU0sSUFBSSxHQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRSxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUM1QixjQUFjLEVBQUUsWUFBWTtRQUM1QixpQkFBaUIsRUFBRTtZQUNmLGVBQWUsRUFBRSxxQkFBcUIsSUFBSSxTQUFJLEVBQUU7WUFDaEQsS0FBSyxFQUFFO2dCQUNILFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDckIsS0FBSyxFQUFFLElBQUk7YUFDZDtTQUNKO0tBQ0osQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxZQUFZLEVBQUUsR0FBb0IsRUFBRSxxQkFBOEIsRUFBZ0IsRUFBRSxDQUM3RyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLHFCQUFxQixDQUFDLENBQy9EO0FBRVksUUFBQSxVQUFVLEdBQUc7SUFDdEIsYUFBYTtJQUNiLGtCQUFrQjtDQUNyQixDQUFBO0FBRUQsa0JBQWUsa0JBQVUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7djQgYXMgdXVpZH0gZnJvbSAndXVpZCc7XG5jb25zdCBhd3NjZiA9IG5ldyAocmVxdWlyZSgnYXdzLXNkay9jbGllbnRzL2Nsb3VkZnJvbnQnKSkoe3JlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX0NMT1VERlJPTlRfUkVHSU9OIHx8IHByb2Nlc3MuZW52LkFXU19SRUdJT059KTtcblxuY29uc3QgY3JlYXRlSW52YWxpZGF0aW9uID0gYXN5bmMgKGRpc3RyaWJ1dGlvbiwgdXJpOiBzdHJpbmd8c3RyaW5nW10sIGludmFsaWRhdGlvblJlZmVyZW5jZT86IHN0cmluZyk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgY29uc3QgdXJpczogc3RyaW5nW10gPSBBcnJheS5pc0FycmF5KHVyaSkgPyA8c3RyaW5nW10+dXJpIDogW3VyaV07XG4gICAgcmV0dXJuIGF3c2NmLmNyZWF0ZUludmFsaWRhdGlvbih7XG4gICAgICAgIERpc3RyaWJ1dGlvbklkOiBkaXN0cmlidXRpb24sXG4gICAgICAgIEludmFsaWRhdGlvbkJhdGNoOiB7XG4gICAgICAgICAgICBDYWxsZXJSZWZlcmVuY2U6IGludmFsaWRhdGlvblJlZmVyZW5jZSB8fCB1dWlkKCksXG4gICAgICAgICAgICBQYXRoczoge1xuICAgICAgICAgICAgICAgIFF1YW50aXR5OiB1cmlzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBJdGVtczogdXJpcyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pLnByb21pc2UoKTtcbn07XG5cbmNvbnN0IGludmFsaWRhdGVVcmkgPSBhc3luYyAoZGlzdHJpYnV0aW9uLCB1cmk6IHN0cmluZ3xzdHJpbmdbXSwgaW52YWxpZGF0aW9uUmVmZXJlbmNlPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+XG4gICAgY3JlYXRlSW52YWxpZGF0aW9uKGRpc3RyaWJ1dGlvbiwgdXJpLCBpbnZhbGlkYXRpb25SZWZlcmVuY2UpXG47XG5cbmV4cG9ydCBjb25zdCBjbG91ZGZyb250ID0ge1xuICAgIGludmFsaWRhdGVVcmksXG4gICAgY3JlYXRlSW52YWxpZGF0aW9uLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbG91ZGZyb250Il19
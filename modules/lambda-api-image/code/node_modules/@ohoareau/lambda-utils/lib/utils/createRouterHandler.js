"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers = __importStar(require("../responses"));
const getLambdaConfig_1 = __importDefault(require("./getLambdaConfig"));
const getRequestInfosFromEvent_1 = __importDefault(require("./getRequestInfosFromEvent"));
const mergeConfig_1 = __importDefault(require("./mergeConfig"));
const defaultProcessHandler_1 = __importDefault(require("./defaultProcessHandler"));
function createRouterHandler(defaultConfig = {}, customProcessHandler = undefined) {
    return async function (event, context) {
        var _a;
        const config = mergeConfig_1.default(await getLambdaConfig_1.default(), defaultConfig);
        const request = getRequestInfosFromEvent_1.default(event, config['routes']);
        const ctx = {
            request,
            config,
            helpers,
            event,
            context,
            query: {
                ...(request.params || {}),
                ...(request.data ? { data: request.data || {} } : {}),
            },
        };
        if ((config['statics'] || {})[request.uri]) {
            const staticInfos = config['statics'][request.uri];
            return helpers.staticFile({
                root: config.root,
                ...staticInfos,
                headers: {
                    ...(((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.defaultStaticsHeaders) || {}),
                    ...(staticInfos.headers || {})
                }
            });
        }
        try {
            return await (customProcessHandler || defaultProcessHandler_1.default)(ctx);
        }
        catch (e) {
            return helpers.httpError({ statusCode: 500 });
        }
    };
}
exports.createRouterHandler = createRouterHandler;
exports.default = createRouterHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUm91dGVySGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jcmVhdGVSb3V0ZXJIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHNEQUF3QztBQUN4Qyx3RUFBZ0Q7QUFDaEQsMEZBQWtFO0FBRWxFLGdFQUF3QztBQUN4QyxvRkFBNEQ7QUFFNUQsU0FBZ0IsbUJBQW1CLENBQUMsZ0JBQXFCLEVBQUUsRUFBRSx1QkFBK0QsU0FBUztJQUNqSSxPQUFPLEtBQUssV0FBVyxLQUFLLEVBQUUsT0FBTzs7UUFDakMsTUFBTSxNQUFNLEdBQUcscUJBQVcsQ0FBQyxNQUFNLHlCQUFlLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuRSxNQUFNLE9BQU8sR0FBRyxrQ0FBd0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFbEUsTUFBTSxHQUFHLEdBQUc7WUFDUixPQUFPO1lBQ1AsTUFBTTtZQUNOLE9BQU87WUFDUCxLQUFLO1lBQ0wsT0FBTztZQUNQLEtBQUssRUFBRTtnQkFDSCxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDdEQ7U0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuRCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUM7Z0JBQ3RCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtnQkFDakIsR0FBRyxXQUFXO2dCQUNkLE9BQU8sRUFBRTtvQkFDTCxHQUFHLENBQUMsT0FBQSxHQUFHLENBQUMsTUFBTSwwQ0FBRSxxQkFBcUIsS0FBSSxFQUFFLENBQUM7b0JBQzVDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztpQkFDakM7YUFDSixDQUFDLENBQUM7U0FDTjtRQUVELElBQUk7WUFFQSxPQUFPLE1BQU0sQ0FBQyxvQkFBb0IsSUFBSSwrQkFBcUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JFO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFwQ0Qsa0RBb0NDO0FBRUQsa0JBQWUsbUJBQW1CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4uL3Jlc3BvbnNlcyc7XG5pbXBvcnQgZ2V0TGFtYmRhQ29uZmlnIGZyb20gXCIuL2dldExhbWJkYUNvbmZpZ1wiO1xuaW1wb3J0IGdldFJlcXVlc3RJbmZvc0Zyb21FdmVudCBmcm9tIFwiLi9nZXRSZXF1ZXN0SW5mb3NGcm9tRXZlbnRcIjtcbmltcG9ydCB7Y3R4fSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tIFwiLi9tZXJnZUNvbmZpZ1wiO1xuaW1wb3J0IGRlZmF1bHRQcm9jZXNzSGFuZGxlciBmcm9tIFwiLi9kZWZhdWx0UHJvY2Vzc0hhbmRsZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlckhhbmRsZXIoZGVmYXVsdENvbmZpZzogYW55ID0ge30sIGN1c3RvbVByb2Nlc3NIYW5kbGVyOiAoKGN0eDogY3R4KSA9PiBQcm9taXNlPGFueT4pfHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gbWVyZ2VDb25maWcoYXdhaXQgZ2V0TGFtYmRhQ29uZmlnKCksIGRlZmF1bHRDb25maWcpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gZ2V0UmVxdWVzdEluZm9zRnJvbUV2ZW50KGV2ZW50LCBjb25maWdbJ3JvdXRlcyddKTtcblxuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgaGVscGVycyxcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgLi4uKHJlcXVlc3QucGFyYW1zIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAuLi4ocmVxdWVzdC5kYXRhID8ge2RhdGE6IHJlcXVlc3QuZGF0YSB8fCB7fX0gOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgoY29uZmlnWydzdGF0aWNzJ10gfHwge30pW3JlcXVlc3QudXJpXSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGljSW5mb3MgPSBjb25maWdbJ3N0YXRpY3MnXVtyZXF1ZXN0LnVyaV07XG4gICAgICAgICAgICByZXR1cm4gaGVscGVycy5zdGF0aWNGaWxlKHtcbiAgICAgICAgICAgICAgICByb290OiBjb25maWcucm9vdCxcbiAgICAgICAgICAgICAgICAuLi5zdGF0aWNJbmZvcyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihjdHguY29uZmlnPy5kZWZhdWx0U3RhdGljc0hlYWRlcnMgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oc3RhdGljSW5mb3MuaGVhZGVycyB8fCB7fSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB3ZSBkbyB0aGUgYGF3YWl0YCBoZXJlIGJlY2F1c2Ugd2UgbmVlZCB0byBjYXRjaCBlcnJvciBoZXJlXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgKGN1c3RvbVByb2Nlc3NIYW5kbGVyIHx8IGRlZmF1bHRQcm9jZXNzSGFuZGxlcikoY3R4KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuaHR0cEVycm9yKHtzdGF0dXNDb2RlOiA1MDB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUm91dGVySGFuZGxlciJdfQ==
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const sharp_1 = __importDefault(require("sharp"));
const availableOperations = __importStar(require("./operations"));
const availableTargetTypes = __importStar(require("./target-types"));
const availableSourceTypes = __importStar(require("./source-types"));
const utils_1 = require("./utils");
async function build({ input, operations = [], output, sourceTypes = {}, targetTypes = {} }) {
    const source = await fetch(input, sourceTypes);
    let img = (await operations.reduce(async (acc, operation) => {
        acc = (await acc) || acc;
        try {
            if (!availableOperations[operation.type]) {
                throw new Error(`Unknown operation: ${operation.type}`);
            }
            return (await availableOperations[operation.type](acc, operation)) || acc;
        }
        catch (e) {
            console.warn(`Warning: ${e.message}`);
            return acc;
        }
    }, Promise.resolve(sharp_1.default(source, { sequentialRead: true }))));
    const { format, target } = await describeTarget(output);
    format && (img = img.toFormat(format));
    return save(img, target, targetTypes);
}
async function describeTarget(output) {
    if (!output)
        throw new Error(`Output is empty`);
    if ('buffer' === output)
        output = 'buffer://';
    if ('string' === typeof output) {
        if (-1 === output.indexOf('://')) {
            output = `file://${output}`;
        }
        output = utils_1.parseDsn(output);
    }
    (output && output.location && !output.format && ('string' === typeof output.location)) && (output.format = utils_1.parseFormat(output.location));
    const { format, ...target } = output;
    return { format, target };
}
async function save(img, target, targetTypes = {}) {
    const allTargetTypes = { ...availableTargetTypes, ...targetTypes };
    const targetType = allTargetTypes[target === null || target === void 0 ? void 0 : target.type];
    if (!targetType)
        throw new Error(`Unsupported target type '${target === null || target === void 0 ? void 0 : target.type}'`);
    return targetType(img, target);
}
async function fetch(input, sourceTypes = {}) {
    if (!input)
        throw new Error(`Input is empty`);
    if (Buffer.isBuffer(input))
        return input;
    if ('string' === typeof input) {
        if (-1 === input.indexOf('://')) {
            input = `file://${input}`;
        }
        input = utils_1.parseDsn(input);
    }
    const allSourceTypes = { ...availableSourceTypes, ...sourceTypes };
    const sourceType = allSourceTypes[input === null || input === void 0 ? void 0 : input.type];
    if (!sourceType)
        throw new Error(`Unsupported source type '${input === null || input === void 0 ? void 0 : input.type}'`);
    return sourceType(input, sourceType);
}
exports.default = build;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLGtFQUFtRDtBQUNuRCxxRUFBdUQ7QUFDdkQscUVBQXVEO0FBQ3ZELG1DQUE4QztBQUU5QyxLQUFLLFVBQVUsS0FBSyxDQUFDLEVBQUMsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFLEVBQUUsV0FBVyxHQUFHLEVBQUUsRUFBZ0I7SUFDcEcsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBMEIsQ0FBQTtJQUN2RSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQ3hELEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ3pCLElBQUc7WUFDQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUV0QyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUMzRDtZQUNELE9BQU8sQ0FBQyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUU7U0FDOUU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUN0QyxPQUFPLEdBQUcsQ0FBQztTQUNkO0lBRUwsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBSyxDQUFDLE1BQU0sRUFBRSxFQUFDLGNBQWMsRUFBRSxJ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LENBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM3RSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELGtCQUFlLEtBQUssQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW1hZ2VtYW5fYXJnc30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgc2hhcnAgZnJvbSAnc2hhcnAnO1xuaW1wb3J0ICogYXMgYXZhaWxhYmxlT3BlcmF0aW9ucyBmcm9tICcuL29wZXJhdGlvbnMnXG5pbXBvcnQgKiBhcyBhdmFpbGFibGVUYXJnZXRUeXBlcyBmcm9tICcuL3RhcmdldC10eXBlcyc7XG5pbXBvcnQgKiBhcyBhdmFpbGFibGVTb3VyY2VUeXBlcyBmcm9tICcuL3NvdXJjZS10eXBlcyc7XG5pbXBvcnQge3BhcnNlRHNuLCBwYXJzZUZvcm1hdH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuYXN5bmMgZnVuY3Rpb24gYnVpbGQoe2lucHV0LCBvcGVyYXRpb25zID0gW10sIG91dHB1dCwgc291cmNlVHlwZXMgPSB7fSwgdGFyZ2V0VHlwZXMgPSB7fX06IGltYWdlbWFuX2FyZ3MpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBhd2FpdCBmZXRjaChpbnB1dCwgc291cmNlVHlwZXMpIGFzIEJ1ZmZlcnxSZWFkYWJsZVN0cmVhbVxuICAgIGxldCBpbWcgPSAoYXdhaXQgb3BlcmF0aW9ucy5yZWR1Y2UoYXN5bmMgKGFjYywgb3BlcmF0aW9uKSA9PiB7XG4gICAgICAgIGFjYyA9IChhd2FpdCBhY2MpIHx8IGFjYztcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgaWYgKCFhdmFpbGFibGVPcGVyYXRpb25zW29wZXJhdGlvbi50eXBlXSkge1xuICAgICAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBFeGNlcHRpb25DYXVnaHRMb2NhbGx5SlNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gb3BlcmF0aW9uOiAke29wZXJhdGlvbi50eXBlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBhdmFpbGFibGVPcGVyYXRpb25zW29wZXJhdGlvbi50eXBlXShhY2MsIG9wZXJhdGlvbikpIHx8IGFjYyA7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgV2FybmluZzogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG5cbiAgICB9LCBQcm9taXNlLnJlc29sdmUoc2hhcnAoc291cmNlLCB7c2VxdWVudGlhbFJlYWQ6IHRydWV9KSkpKTtcbiAgICBjb25zdCB7Zm9ybWF0LCB0YXJnZXR9ID0gYXdhaXQgZGVzY3JpYmVUYXJnZXQob3V0cHV0KTtcbiAgICBmb3JtYXQgJiYgKGltZyA9IGltZy50b0Zvcm1hdChmb3JtYXQpKTtcbiAgICByZXR1cm4gc2F2ZShpbWcsIHRhcmdldCwgdGFyZ2V0VHlwZXMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZXNjcmliZVRhcmdldChvdXRwdXQpIHtcbiAgICBpZiAoIW91dHB1dCkgdGhyb3cgbmV3IEVycm9yKGBPdXRwdXQgaXMgZW1wdHlgKTtcbiAgICBpZiAoJ2J1ZmZlcicgPT09IG91dHB1dCkgb3V0cHV0ID0gJ2J1ZmZlcjovLyc7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygb3V0cHV0KSB7XG4gICAgICAgIGlmICgtMSA9PT0gb3V0cHV0LmluZGV4T2YoJzovLycpKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBgZmlsZTovLyR7b3V0cHV0fWA7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ID0gcGFyc2VEc24ob3V0cHV0KTtcbiAgICB9XG4gICAgKG91dHB1dCAmJiBvdXRwdXQubG9jYXRpb24gJiYgIW91dHB1dC5mb3JtYXQgJiYgKCdzdHJpbmcnID09PSB0eXBlb2Ygb3V0cHV0LmxvY2F0aW9uKSkgJiYgKG91dHB1dC5mb3JtYXQgPSBwYXJzZUZvcm1hdChvdXRwdXQubG9jYXRpb24pKTtcbiAgICBjb25zdCB7Zm9ybWF0LCAuLi50YXJnZXR9ID0gb3V0cHV0O1xuICAgIHJldHVybiB7Zm9ybWF0LCB0YXJnZXR9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzYXZlKGltZywgdGFyZ2V0LCB0YXJnZXRUeXBlcyA9IHt9KSB7XG4gICAgY29uc3QgYWxsVGFyZ2V0VHlwZXMgPSB7Li4uYXZhaWxhYmxlVGFyZ2V0VHlwZXMsIC4uLnRhcmdldFR5cGVzfTtcbiAgICBjb25zdCB0YXJnZXRUeXBlID0gYWxsVGFyZ2V0VHlwZXNbdGFyZ2V0Py50eXBlXTtcbiAgICBpZiAoIXRhcmdldFR5cGUpIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdGFyZ2V0IHR5cGUgJyR7dGFyZ2V0Py50eXBlfSdgKTtcbiAgICByZXR1cm4gdGFyZ2V0VHlwZShpbWcsIHRhcmdldClcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIHNvdXJjZVR5cGVzID0ge30pIHtcbiAgICBpZiAoIWlucHV0KSB0aHJvdyBuZXcgRXJyb3IoYElucHV0IGlzIGVtcHR5YCk7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBpbnB1dCkge1xuICAgICAgICBpZiAoLTEgPT09IGlucHV0LmluZGV4T2YoJzovLycpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGBmaWxlOi8vJHtpbnB1dH1gO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gcGFyc2VEc24oaW5wdXQpO1xuICAgIH1cbiAgICBjb25zdCBhbGxTb3VyY2VUeXBlcyA9IHsuLi5hdmFpbGFibGVTb3VyY2VUeXBlcywgLi4uc291cmNlVHlwZXN9O1xuICAgIGNvbnN0IHNvdXJjZVR5cGUgPSBhbGxTb3VyY2VUeXBlc1tpbnB1dD8udHlwZV07XG4gICAgaWYgKCFzb3VyY2VUeXBlKSB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHNvdXJjZSB0eXBlICcke2lucHV0Py50eXBlfSdgKTtcbiAgICByZXR1cm4gc291cmNlVHlwZShpbnB1dCwgc291cmNlVHlwZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkIl19
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const sharp_1 = __importDefault(require("sharp"));
const availableOperations = __importStar(require("./operations"));
const availableTargetTypes = __importStar(require("./target-types"));
const availableSourceTypes = __importStar(require("./source-types"));
const utils_1 = require("./utils");
async function build({ input, operations = [], output, sourceTypes = {}, targetTypes = {} }) {
    const source = await fetch(input, sourceTypes);
    let img = (await operations.reduce(async (acc, operation) => {
        acc = (await acc) || acc;
        try {
            if (!availableOperations[operation.type]) {
                throw new Error(`Unknown operation: ${operation.type}`);
            }
            return (await availableOperations[operation.type](acc, operation)) || acc;
        }
        catch (e) {
            console.warn(`Warning: ${e.message}`);
            return acc;
        }
    }, Promise.resolve(sharp_1.default(source, { sequentialRead: true }))));
    const { format, target } = await describeTarget(output);
    format && (img = img.toFormat(format));
    return save(img, target, targetTypes);
}
async function describeTarget(output) {
    if (!output)
        throw new Error(`Output is empty`);
    if ('buffer' === output)
        output = 'buffer://buffer';
    if ('string' === typeof output) {
        if (-1 === output.indexOf('://')) {
            output = `file://${output}`;
        }
        output = utils_1.parseDsn(output);
    }
    (output && output.location && !output.format && ('string' === typeof output.location)) && (output.format = utils_1.parseFormat(output.location));
    const { format, ...target } = output;
    return { format, target };
}
async function save(img, target, targetTypes = {}) {
    const allTargetTypes = { ...availableTargetTypes, ...targetTypes };
    const targetType = allTargetTypes[target === null || target === void 0 ? void 0 : target.type];
    if (!targetType)
        throw new Error(`Unsupported target type '${target === null || target === void 0 ? void 0 : target.type}'`);
    return targetType(img, target);
}
async function fetch(input, sourceTypes = {}) {
    if (!input)
        throw new Error(`Input is empty`);
    if (Buffer.isBuffer(input))
        return input;
    if ('string' === typeof input) {
        if (-1 === input.indexOf('://')) {
            input = `file://${input}`;
        }
        input = utils_1.parseDsn(input);
    }
    const allSourceTypes = { ...availableSourceTypes, ...sourceTypes };
    const sourceType = allSourceTypes[input === null || input === void 0 ? void 0 : input.type];
    if (!sourceType)
        throw new Error(`Unsupported source type '${input === null || input === void 0 ? void 0 : input.type}'`);
    return sourceType(input, sourceType);
}
exports.default = build;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLGtFQUFtRDtBQUNuRCxxRUFBdUQ7QUFDdkQscUVBQXVEO0FBQ3ZELG1DQUE4QztBQUU5QyxLQUFLLFVBQVUsS0FBSyxDQUFDLEVBQUMsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFLEVBQUUsV0FBVyxHQUFHLEVBQUUsRUFBZ0I7SUFDcEcsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBMEIsQ0FBQTtJQUN2RSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQ3hELEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ3pCLElBQUc7WUFDQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUV0QyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUMzRDtZQUNELE9BQU8sQ0FBQyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUU7U0FDOUU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUN0QyxPQUFPLEdBQUcsQ0FBQztTQUNkO0lBRUwsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBSyxDQUFDLE1BQU0sRUFBRSxFQUFDLGNBQWMsRUFBRSxJ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QUssQ0FBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzdFLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsa0JBQWUsS0FBSyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpbWFnZW1hbl9hcmdzfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBzaGFycCBmcm9tICdzaGFycCc7XG5pbXBvcnQgKiBhcyBhdmFpbGFibGVPcGVyYXRpb25zIGZyb20gJy4vb3BlcmF0aW9ucydcbmltcG9ydCAqIGFzIGF2YWlsYWJsZVRhcmdldFR5cGVzIGZyb20gJy4vdGFyZ2V0LXR5cGVzJztcbmltcG9ydCAqIGFzIGF2YWlsYWJsZVNvdXJjZVR5cGVzIGZyb20gJy4vc291cmNlLXR5cGVzJztcbmltcG9ydCB7cGFyc2VEc24sIHBhcnNlRm9ybWF0fSBmcm9tIFwiLi91dGlsc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBidWlsZCh7aW5wdXQsIG9wZXJhdGlvbnMgPSBbXSwgb3V0cHV0LCBzb3VyY2VUeXBlcyA9IHt9LCB0YXJnZXRUeXBlcyA9IHt9fTogaW1hZ2VtYW5fYXJncykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IGZldGNoKGlucHV0LCBzb3VyY2VUeXBlcykgYXMgQnVmZmVyfFJlYWRhYmxlU3RyZWFtXG4gICAgbGV0IGltZyA9IChhd2FpdCBvcGVyYXRpb25zLnJlZHVjZShhc3luYyAoYWNjLCBvcGVyYXRpb24pID0+IHtcbiAgICAgICAgYWNjID0gKGF3YWl0IGFjYykgfHwgYWNjO1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBpZiAoIWF2YWlsYWJsZU9wZXJhdGlvbnNbb3BlcmF0aW9uLnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEV4Y2VwdGlvbkNhdWdodExvY2FsbHlKU1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcGVyYXRpb246ICR7b3BlcmF0aW9uLnR5cGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IGF2YWlsYWJsZU9wZXJhdGlvbnNbb3BlcmF0aW9uLnR5cGVdKGFjYywgb3BlcmF0aW9uKSkgfHwgYWNjIDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBXYXJuaW5nOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cblxuICAgIH0sIFByb21pc2UucmVzb2x2ZShzaGFycChzb3VyY2UsIHtzZXF1ZW50aWFsUmVhZDogdHJ1ZX0pKSkpO1xuICAgIGNvbnN0IHtmb3JtYXQsIHRhcmdldH0gPSBhd2FpdCBkZXNjcmliZVRhcmdldChvdXRwdXQpO1xuICAgIGZvcm1hdCAmJiAoaW1nID0gaW1nLnRvRm9ybWF0KGZvcm1hdCkpO1xuICAgIHJldHVybiBzYXZlKGltZywgdGFyZ2V0LCB0YXJnZXRUeXBlcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlc2NyaWJlVGFyZ2V0KG91dHB1dCkge1xuICAgIGlmICghb3V0cHV0KSB0aHJvdyBuZXcgRXJyb3IoYE91dHB1dCBpcyBlbXB0eWApO1xuICAgIGlmICgnYnVmZmVyJyA9PT0gb3V0cHV0KSBvdXRwdXQgPSAnYnVmZmVyOi8vYnVmZmVyJztcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBvdXRwdXQpIHtcbiAgICAgICAgaWYgKC0xID09PSBvdXRwdXQuaW5kZXhPZignOi8vJykpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGBmaWxlOi8vJHtvdXRwdXR9YDtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQgPSBwYXJzZURzbihvdXRwdXQpO1xuICAgIH1cbiAgICAob3V0cHV0ICYmIG91dHB1dC5sb2NhdGlvbiAmJiAhb3V0cHV0LmZvcm1hdCAmJiAoJ3N0cmluZycgPT09IHR5cGVvZiBvdXRwdXQubG9jYXRpb24pKSAmJiAob3V0cHV0LmZvcm1hdCA9IHBhcnNlRm9ybWF0KG91dHB1dC5sb2NhdGlvbikpO1xuICAgIGNvbnN0IHtmb3JtYXQsIC4uLnRhcmdldH0gPSBvdXRwdXQ7XG4gICAgcmV0dXJuIHtmb3JtYXQsIHRhcmdldH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmUoaW1nLCB0YXJnZXQsIHRhcmdldFR5cGVzID0ge30pIHtcbiAgICBjb25zdCBhbGxUYXJnZXRUeXBlcyA9IHsuLi5hdmFpbGFibGVUYXJnZXRUeXBlcywgLi4udGFyZ2V0VHlwZXN9O1xuICAgIGNvbnN0IHRhcmdldFR5cGUgPSBhbGxUYXJnZXRUeXBlc1t0YXJnZXQ/LnR5cGVdO1xuICAgIGlmICghdGFyZ2V0VHlwZSkgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0YXJnZXQgdHlwZSAnJHt0YXJnZXQ/LnR5cGV9J2ApO1xuICAgIHJldHVybiB0YXJnZXRUeXBlKGltZywgdGFyZ2V0KVxufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaChpbnB1dCwgc291cmNlVHlwZXMgPSB7fSkge1xuICAgIGlmICghaW5wdXQpIHRocm93IG5ldyBFcnJvcihgSW5wdXQgaXMgZW1wdHlgKTtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGlucHV0KSB7XG4gICAgICAgIGlmICgtMSA9PT0gaW5wdXQuaW5kZXhPZignOi8vJykpIHtcbiAgICAgICAgICAgIGlucHV0ID0gYGZpbGU6Ly8ke2lucHV0fWA7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBwYXJzZURzbihpbnB1dCk7XG4gICAgfVxuICAgIGNvbnN0IGFsbFNvdXJjZVR5cGVzID0gey4uLmF2YWlsYWJsZVNvdXJjZVR5cGVzLCAuLi5zb3VyY2VUeXBlc307XG4gICAgY29uc3Qgc291cmNlVHlwZSA9IGFsbFNvdXJjZVR5cGVzW2lucHV0Py50eXBlXTtcbiAgICBpZiAoIXNvdXJjZVR5cGUpIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgc291cmNlIHR5cGUgJyR7aW5wdXQ/LnR5cGV9J2ApO1xuICAgIHJldHVybiBzb3VyY2VUeXBlKGlucHV0LCBzb3VyY2VUeXBlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnVpbGQiXX0=
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const availableTargetTypes = __importStar(require("./target-types"));
const availableSourceTypes = __importStar(require("./source-types"));
function parseDsn(string) {
    const [type, location = undefined] = string.split(/:\/\//);
    return { type: location ? type : 'file', location: location || type };
}
exports.parseDsn = parseDsn;
async function applyFormat(img, format) {
    switch (format === null || format === void 0 ? void 0 : format.type) {
        case 'png': return img.png(format.options);
        case 'jpeg': return img.jpeg(format.options);
        case 'gif': return img.gif(format.options);
        case 'webp': return img.webp(format.options);
        case 'tiff': return img.tiff(format.options);
        case 'avif': return img.avif(format.options);
        case 'heif': return img.heif(format.options);
        case 'raw': return img.raw(format.options);
        default: return img;
    }
}
exports.applyFormat = applyFormat;
async function describeTarget(output, format = undefined) {
    if (!output)
        throw new Error(`Output is empty`);
    if ('string' === typeof output) {
        switch (output) {
            case 'stdout':
                output = 'stdout://stdout';
                break;
            case 'buffer':
                output = 'buffer://buffer';
                break;
            default:
                if (-1 === output.indexOf('://')) {
                    output = `file://${output}`;
                }
                break;
        }
        output = parseDsn(output);
    }
    const detectedFormatName = detectFormatFromFileName(output.location);
    return { format: format || (detectedFormatName ? { type: detectedFormatName } : output.format), target: { ...output } };
}
exports.describeTarget = describeTarget;
async function save(img, target, targetTypes = {}) {
    const allTargetTypes = { ...availableTargetTypes, ...targetTypes };
    const targetType = allTargetTypes[target === null || target === void 0 ? void 0 : target.type];
    if (!targetType)
        throw new Error(`Unsupported target type '${target === null || target === void 0 ? void 0 : target.type}'`);
    return targetType(img, target);
}
exports.save = save;
async function fetch(input, sourceTypes = {}) {
    if (!input)
        throw new Error(`Input is empty`);
    if (Buffer.isBuffer(input))
        return input;
    if ('string' === typeof input) {
        if (-1 === input.indexOf('://')) {
            input = `file://${input}`;
        }
        input = parseDsn(input);
    }
    const allSourceTypes = { ...availableSourceTypes, ...sourceTypes };
    const sourceType = allSourceTypes[input === null || input === void 0 ? void 0 : input.type];
    if (!sourceType)
        throw new Error(`Unsupported source type '${input === null || input === void 0 ? void 0 : input.type}'`);
    return sourceType(input, sourceType);
}
exports.fetch = fetch;
exports.extensions = {
    jpg: 'jpg',
    jpeg: 'jpeg',
    png: 'png',
    gif: 'gif',
    webp: 'webp',
    tiff: 'tiff',
    avif: 'avif',
    heic: 'heif',
    heif: 'heif',
    raw: 'raw',
};
function detectFormatFromFileName(name) {
    if (!name)
        return undefined;
    return exports.extensions[(name.slice(name.lastIndexOf('.') + 1) || '').toLowerCase()] || undefined;
}
exports.detectFormatFromFileName = detectFormatFromFileName;
//# sourceMappingURL=data:application/json;base64,
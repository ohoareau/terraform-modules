"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeRule_1 = __importDefault(require("./executeRule"));
const default_rules_1 = __importDefault(require("../default-rules"));
const isMatchingRule_1 = __importDefault(require("./isMatchingRule"));
const extractRuleParams_1 = __importDefault(require("./extractRuleParams"));
const convertRequestToOrder_1 = __importDefault(require("./convertRequestToOrder"));
const ResourceNotFoundError_1 = __importDefault(require("../errors/ResourceNotFoundError"));
async function buildOrderFromRequest(request, config) {
    const rules = [...((config === null || config === void 0 ? void 0 : config.rules) || []), ...default_rules_1.default];
    let found = rules.find(rule => isMatchingRule_1.default(rule, request));
    if (!found)
        throw new ResourceNotFoundError_1.default(request);
    const { input = undefined, operations = [], options = undefined, format } = await convertRequestToOrder_1.default(request, config);
    const params = extractRuleParams_1.default(found, request);
    found = { ...found, params: { ...(found.params || {}), ...(params || {}) } };
    const order = await executeRule_1.default(found, request, config);
    return {
        ...order,
        ...(format ? { format } : {}),
        ...(input ? { input } : {}),
        operations: [
            ...((order === null || order === void 0 ? void 0 : order.operations) || []),
            ...(operations || []),
        ],
        options: {
            ...((order === null || order === void 0 ? void 0 : order.options) || {}),
            ...(options || {}),
        },
    };
}
exports.buildOrderFromRequest = buildOrderFromRequest;
exports.default = buildOrderFromRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRPcmRlckZyb21SZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2J1aWxkT3JkZXJGcm9tUmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdFQUF3QztBQUN4QyxxRUFBNEM7QUFDNUMsc0VBQThDO0FBQzlDLDRFQUFvRDtBQUNwRCxvRkFBNEQ7QUFDNUQsNEZBQW9FO0FBRzdELEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxPQUFnQixFQUFFLE1BQVc7SUFJckUsTUFBTSxLQUFLLEdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsS0FBSyxLQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsdUJBQVksQ0FBQyxDQUFDO0lBSWxFLElBQUksS0FBSyxHQUFtQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsd0JBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUU5RSxJQUFJLENBQUMsS0FBSztRQUFFLE1BQU0sSUFBSSwrQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUlyRCxNQUFNLEVBQUMsS0FBSyxHQUFHLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxTQUFTLEVBQUUsTUFBTSxFQUFDLEdBQUcsTUFBTSwrQkFBcUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFJdkgsTUFBTSxNQUFNLEdBQUcsMkJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWpELEtBQUssR0FBRyxFQUFDLEdBQUcsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDO0lBS3pFLE1BQU0sS0FBSyxHQUFHLE1BQU0scUJBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBSXhELE9BQU87UUFDSCxHQUFHLEtBQUs7UUFDUixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hCLFVBQVUsRUFBRTtZQUNSLEdBQUcsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxFQUFFO1lBQ0wsR0FBRyxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLE9BQU8sS0FBSSxFQUFFLENBQUM7WUFDekIsR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDckI7S0FDSyxDQUFDO0FBRWYsQ0FBQztBQTNDRCxzREEyQ0M7QUFFRCxrQkFBZSxxQkFBcUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleGVjdXRlUnVsZSBmcm9tIFwiLi9leGVjdXRlUnVsZVwiO1xuaW1wb3J0IGRlZmF1bHRSdWxlcyBmcm9tICcuLi9kZWZhdWx0LXJ1bGVzJztcbmltcG9ydCBpc01hdGNoaW5nUnVsZSBmcm9tIFwiLi9pc01hdGNoaW5nUnVsZVwiO1xuaW1wb3J0IGV4dHJhY3RSdWxlUGFyYW1zIGZyb20gXCIuL2V4dHJhY3RSdWxlUGFyYW1zXCI7XG5pbXBvcnQgY29udmVydFJlcXVlc3RUb09yZGVyIGZyb20gXCIuL2NvbnZlcnRSZXF1ZXN0VG9PcmRlclwiO1xuaW1wb3J0IFJlc291cmNlTm90Rm91bmRFcnJvciBmcm9tIFwiLi4vZXJyb3JzL1Jlc291cmNlTm90Rm91bmRFcnJvclwiO1xuaW1wb3J0IHtyZXF1ZXN0LCBydWxlLCBvcmRlcn0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZE9yZGVyRnJvbVJlcXVlc3QocmVxdWVzdDogcmVxdWVzdCwgY29uZmlnOiBhbnkpOiBQcm9taXNlPG9yZGVyPiB7XG5cbiAgICAvLyBmcm9tIHRoZSBjb25maWcsIGFuZCBtZXJnZWQgd2l0aCBkZWZhdWx0cywgd2UgYnVpbGQgYW4gb3JkZXJlZCBsaXN0IG9mIHJ1bGVzICh1cmkgcGF0dGVybnMpXG5cbiAgICBjb25zdCBydWxlczogcnVsZVtdID0gWy4uLihjb25maWc/LnJ1bGVzIHx8IFtdKSwgLi4uZGVmYXVsdFJ1bGVzXTtcblxuICAgIC8vIHRoZW4gd2UgdHJ5IHRvIGZpbmQsIGluIG9yZGVyLCB0aGUgZmlyc3QgbWF0Y2hpbmcgdXJsIChpLmUuIHRoZSB1cmkgcGF0dGVybiB0aGF0IG1hdGNoIHRoZSByZXF1ZXN0IHVyaSlcblxuICAgIGxldCBmb3VuZDogcnVsZXx1bmRlZmluZWQgPSBydWxlcy5maW5kKHJ1bGUgPT4gaXNNYXRjaGluZ1J1bGUocnVsZSwgcmVxdWVzdCkpO1xuXG4gICAgaWYgKCFmb3VuZCkgdGhyb3cgbmV3IFJlc291cmNlTm90Rm91bmRFcnJvcihyZXF1ZXN0KTtcblxuICAgIC8vIHdlIG5vdyBoYXZlIGEgcmVxdWVzdCwgdGhlIG1pY3Jvc2VydmljZSBjb25maWcsIHdlIG5lZWQgdG8gY29udmVydCB0aGUgcmVxdWVzdCB0byBwYXJ0IG9mIHRoZSBvcmRlclxuXG4gICAgY29uc3Qge2lucHV0ID0gdW5kZWZpbmVkLCBvcGVyYXRpb25zID0gW10sIG9wdGlvbnMgPSB1bmRlZmluZWQsIGZvcm1hdH0gPSBhd2FpdCBjb252ZXJ0UmVxdWVzdFRvT3JkZXIocmVxdWVzdCwgY29uZmlnKTtcblxuICAgIC8vIGRlcGVuZGluZyBvbiB0aGUgZm91bmQgcnVsZSwgd2UgbmVlZCB0byBwb3RlbnRpYWxseSBleHRyYWN0IHBhcmFtcyBmcm9tIHRoZSB1cmkgKGFuZCBxdWVyeVN0cmluZylcblxuICAgIGNvbnN0IHBhcmFtcyA9IGV4dHJhY3RSdWxlUGFyYW1zKGZvdW5kLCByZXF1ZXN0KTtcblxuICAgIGZvdW5kID0gey4uLmZvdW5kLCBwYXJhbXM6IHsuLi4oZm91bmQucGFyYW1zIHx8IHt9KSwgLi4uKHBhcmFtcyB8fCB7fSl9fTtcblxuICAgIC8vIHdlIGFyZSBub3cgcmVhZHkgdG8gcHJvY2VzcyB0aGUgcnVsZSBpbiBvcmRlciB0aGUgY29tcGxldGUgdGhlIGNyZWF0aW9uIG9mIHRoZSBvcmRlciB0aGF0IHdpbGwgY29udGFpblxuICAgIC8vIHRoZSBsaXN0IG9mIG9wZXJhdGlvbnMgdG8gc2VuZCB0byBpbWFnZW1hbi5cblxuICAgIGNvbnN0IG9yZGVyID0gYXdhaXQgZXhlY3V0ZVJ1bGUoZm91bmQsIHJlcXVlc3QsIGNvbmZpZyk7XG5cbiAgICAvLyBvcmRlciBpcyBzaGFwZWQgYnV0IHdlIG5lZWQgdG8gbWVyZ2UgaXQgd2l0aCBkZWZhdWx0IHZhbHVlcyBmcm9tIHRoZSByZXF1ZXN0XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5vcmRlcixcbiAgICAgICAgLi4uKGZvcm1hdCA/IHtmb3JtYXR9IDoge30pLFxuICAgICAgICAuLi4oaW5wdXQgPyB7aW5wdXR9OiB7fSksXG4gICAgICAgIG9wZXJhdGlvbnM6IFtcbiAgICAgICAgICAgIC4uLihvcmRlcj8ub3BlcmF0aW9ucyB8fCBbXSksXG4gICAgICAgICAgICAuLi4ob3BlcmF0aW9ucyB8fCBbXSksXG4gICAgICAgIF0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIC4uLihvcmRlcj8ub3B0aW9ucyB8fCB7fSksXG4gICAgICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIH0sXG4gICAgfSBhcyBvcmRlcjtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZE9yZGVyRnJvbVJlcXVlc3QiXX0=
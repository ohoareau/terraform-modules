"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeRule_1 = __importDefault(require("./executeRule"));
const default_rules_1 = __importDefault(require("../default-rules"));
const isMatchingRule_1 = __importDefault(require("./isMatchingRule"));
const extractRuleParams_1 = __importDefault(require("./extractRuleParams"));
const convertRequestToOrder_1 = __importDefault(require("./convertRequestToOrder"));
const ResourceNotFoundError_1 = __importDefault(require("../errors/ResourceNotFoundError"));
async function buildOrderFromRequest(request, config) {
    const rules = [...((config === null || config === void 0 ? void 0 : config.rules) || []), ...default_rules_1.default];
    let found = rules.find(rule => isMatchingRule_1.default(rule, request));
    if (!found)
        throw new ResourceNotFoundError_1.default(request);
    const { input = undefined, operations = [], options = undefined } = await convertRequestToOrder_1.default(request, config);
    const params = extractRuleParams_1.default(found, request);
    found = { ...found, params };
    const order = await executeRule_1.default(found, request, config);
    return {
        ...order,
        ...(input ? { input } : {}),
        operations: [
            ...((order === null || order === void 0 ? void 0 : order.operations) || []),
            ...(operations || []),
        ],
        options: {
            ...((order === null || order === void 0 ? void 0 : order.options) || {}),
            ...(options || {}),
        },
    };
}
exports.buildOrderFromRequest = buildOrderFromRequest;
exports.default = buildOrderFromRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRPcmRlckZyb21SZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2J1aWxkT3JkZXJGcm9tUmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdFQUF3QztBQUN4QyxxRUFBNEM7QUFDNUMsc0VBQThDO0FBQzlDLDRFQUFvRDtBQUNwRCxvRkFBNEQ7QUFDNUQsNEZBQW9FO0FBRzdELEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxPQUFnQixFQUFFLE1BQVc7SUFJckUsTUFBTSxLQUFLLEdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsS0FBSyxLQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsdUJBQVksQ0FBQyxDQUFDO0lBSWxFLElBQUksS0FBSyxHQUFtQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsd0JBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUU5RSxJQUFJLENBQUMsS0FBSztRQUFFLE1BQU0sSUFBSSwrQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUlyRCxNQUFNLEVBQUMsS0FBSyxHQUFHLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxTQUFTLEVBQUMsR0FBRyxNQUFNLCtCQUFxQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUkvRyxNQUFNLE1BQU0sR0FBRywyQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFakQsS0FBSyxHQUFHLEVBQUMsR0FBRyxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFLM0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxxQkFBVyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFJeEQsT0FBTztRQUNILEdBQUcsS0FBSztRQUNSLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN4QixVQUFVLEVBQUU7WUFDUixHQUFHLENBQUMsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsVUFBVSxLQUFJLEVBQUUsQ0FBQztZQUM1QixHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztTQUN4QjtRQUNELE9BQU8sRUFBRTtZQUNMLEdBQUcsQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLEtBQUksRUFBRSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1NBQ3JCO0tBQ0ssQ0FBQztBQUVmLENBQUM7QUExQ0Qsc0RBMENDO0FBRUQsa0JBQWUscUJBQXFCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhlY3V0ZVJ1bGUgZnJvbSBcIi4vZXhlY3V0ZVJ1bGVcIjtcbmltcG9ydCBkZWZhdWx0UnVsZXMgZnJvbSAnLi4vZGVmYXVsdC1ydWxlcyc7XG5pbXBvcnQgaXNNYXRjaGluZ1J1bGUgZnJvbSBcIi4vaXNNYXRjaGluZ1J1bGVcIjtcbmltcG9ydCBleHRyYWN0UnVsZVBhcmFtcyBmcm9tIFwiLi9leHRyYWN0UnVsZVBhcmFtc1wiO1xuaW1wb3J0IGNvbnZlcnRSZXF1ZXN0VG9PcmRlciBmcm9tIFwiLi9jb252ZXJ0UmVxdWVzdFRvT3JkZXJcIjtcbmltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3IgZnJvbSBcIi4uL2Vycm9ycy9SZXNvdXJjZU5vdEZvdW5kRXJyb3JcIjtcbmltcG9ydCB7cmVxdWVzdCwgcnVsZSwgb3JkZXJ9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRPcmRlckZyb21SZXF1ZXN0KHJlcXVlc3Q6IHJlcXVlc3QsIGNvbmZpZzogYW55KTogUHJvbWlzZTxvcmRlcj4ge1xuXG4gICAgLy8gZnJvbSB0aGUgY29uZmlnLCBhbmQgbWVyZ2VkIHdpdGggZGVmYXVsdHMsIHdlIGJ1aWxkIGFuIG9yZGVyZWQgbGlzdCBvZiBydWxlcyAodXJpIHBhdHRlcm5zKVxuXG4gICAgY29uc3QgcnVsZXM6IHJ1bGVbXSA9IFsuLi4oY29uZmlnPy5ydWxlcyB8fCBbXSksIC4uLmRlZmF1bHRSdWxlc107XG5cbiAgICAvLyB0aGVuIHdlIHRyeSB0byBmaW5kLCBpbiBvcmRlciwgdGhlIGZpcnN0IG1hdGNoaW5nIHVybCAoaS5lLiB0aGUgdXJpIHBhdHRlcm4gdGhhdCBtYXRjaCB0aGUgcmVxdWVzdCB1cmkpXG5cbiAgICBsZXQgZm91bmQ6IHJ1bGV8dW5kZWZpbmVkID0gcnVsZXMuZmluZChydWxlID0+IGlzTWF0Y2hpbmdSdWxlKHJ1bGUsIHJlcXVlc3QpKTtcblxuICAgIGlmICghZm91bmQpIHRocm93IG5ldyBSZXNvdXJjZU5vdEZvdW5kRXJyb3IocmVxdWVzdCk7XG5cbiAgICAvLyB3ZSBub3cgaGF2ZSBhIHJlcXVlc3QsIHRoZSBtaWNyb3NlcnZpY2UgY29uZmlnLCB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhlIHJlcXVlc3QgdG8gcGFydCBvZiB0aGUgb3JkZXJcblxuICAgIGNvbnN0IHtpbnB1dCA9IHVuZGVmaW5lZCwgb3BlcmF0aW9ucyA9IFtdLCBvcHRpb25zID0gdW5kZWZpbmVkfSA9IGF3YWl0IGNvbnZlcnRSZXF1ZXN0VG9PcmRlcihyZXF1ZXN0LCBjb25maWcpO1xuXG4gICAgLy8gZGVwZW5kaW5nIG9uIHRoZSBmb3VuZCBydWxlLCB3ZSBuZWVkIHRvIHBvdGVudGlhbGx5IGV4dHJhY3QgcGFyYW1zIGZyb20gdGhlIHVyaSAoYW5kIHF1ZXJ5U3RyaW5nKVxuXG4gICAgY29uc3QgcGFyYW1zID0gZXh0cmFjdFJ1bGVQYXJhbXMoZm91bmQsIHJlcXVlc3QpO1xuXG4gICAgZm91bmQgPSB7Li4uZm91bmQsIHBhcmFtc307XG5cbiAgICAvLyB3ZSBhcmUgbm93IHJlYWR5IHRvIHByb2Nlc3MgdGhlIHJ1bGUgaW4gb3JkZXIgdGhlIGNvbXBsZXRlIHRoZSBjcmVhdGlvbiBvZiB0aGUgb3JkZXIgdGhhdCB3aWxsIGNvbnRhaW5cbiAgICAvLyB0aGUgbGlzdCBvZiBvcGVyYXRpb25zIHRvIHNlbmQgdG8gaW1hZ2VtYW4uXG5cbiAgICBjb25zdCBvcmRlciA9IGF3YWl0IGV4ZWN1dGVSdWxlKGZvdW5kLCByZXF1ZXN0LCBjb25maWcpO1xuXG4gICAgLy8gb3JkZXIgaXMgc2hhcGVkIGJ1dCB3ZSBuZWVkIHRvIG1lcmdlIGl0IHdpdGggZGVmYXVsdCB2YWx1ZXMgZnJvbSB0aGUgcmVxdWVzdFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3JkZXIsXG4gICAgICAgIC4uLihpbnB1dCA/IHtpbnB1dH06IHt9KSxcbiAgICAgICAgb3BlcmF0aW9uczogW1xuICAgICAgICAgICAgLi4uKG9yZGVyPy5vcGVyYXRpb25zIHx8IFtdKSxcbiAgICAgICAgICAgIC4uLihvcGVyYXRpb25zIHx8IFtdKSxcbiAgICAgICAgXSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgLi4uKG9yZGVyPy5vcHRpb25zIHx8IHt9KSxcbiAgICAgICAgICAgIC4uLihvcHRpb25zIHx8IHt9KSxcbiAgICAgICAgfSxcbiAgICB9IGFzIG9yZGVyO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkT3JkZXJGcm9tUmVxdWVzdCJdfQ==
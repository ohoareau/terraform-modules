"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lambda_utils_1 = require("@ohoareau/lambda-utils");
const availableSourceTypes = __importStar(require("../sources"));
const imageman_1 = require("@ohoareau/imageman");
const modifiers = __importStar(require("../modifiers"));
async function buildOrder(ctx) {
    var _a, _b, _c;
    const modifierNames = [
        'preset', 'size', 'trim', 'flip', 'format', 'radius', 'filter',
        'rotation', 'theme', 'color', 'quality',
    ];
    let { input = undefined, operations = [], options = undefined, format } = await modifierNames.reduce(async (acc, modifier) => {
        acc = await acc;
        if (!modifiers[modifier])
            return acc;
        return (await modifiers[modifier](acc, ctx.request, ctx.config)) || acc;
    }, Promise.resolve({ input: undefined, operations: [], options: {} }));
    const sources = { ...availableSourceTypes, ...(ctx.config.sources || {}) };
    const source = sources[ctx.query.source || 'default'];
    if (!source)
        throw new lambda_utils_1.ResourceNotFoundError(ctx.request);
    const sourced = (await source(ctx)) || {};
    sourced.input && (input = sourced.input);
    sourced.operations && (operations = sourced.operations);
    sourced.options && (options = sourced.options);
    sourced.format && (format = sourced.format);
    let formatFromFile = undefined;
    let contentTypeFromFile = undefined;
    if ((_a = ctx.query) === null || _a === void 0 ? void 0 : _a.file) {
        formatFromFile = imageman_1.detectFormatFromFileName((_b = ctx.query) === null || _b === void 0 ? void 0 : _b.file);
        contentTypeFromFile = lambda_utils_1.detectContentTypeFromFileName((_c = ctx.query) === null || _c === void 0 ? void 0 : _c.file);
    }
    const opts = {
        ...(options || {}),
        ...((contentTypeFromFile || (options === null || options === void 0 ? void 0 : options.contentType))
            ? { contentType: contentTypeFromFile || (options === null || options === void 0 ? void 0 : options.contentType) }
            : {}),
    };
    return {
        input,
        format: formatFromFile || format,
        operations: [
            ...operations,
            ...(operations || []),
        ],
        options: opts,
        sourceTypes: {
            ...(ctx.config.sourceTypes || {}),
        },
        targetTypes: {
            ...(ctx.config.targetTypes || {}),
        },
        output: 'buffer',
    };
}
exports.buildOrder = buildOrder;
exports.default = buildOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRPcmRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9idWlsZE9yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLHlEQUFpRztBQUNqRyxpRUFBbUQ7QUFDbkQsaURBQTREO0FBQzVELHdEQUEwQztBQUVuQyxLQUFLLFVBQVUsVUFBVSxDQUFDLEdBQVE7O0lBTXJDLE1BQU0sYUFBYSxHQUFHO1FBQ2xCLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVE7UUFDOUQsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUztLQUMxQyxDQUFDO0lBRUYsSUFBSSxFQUFDLEtBQUssR0FBRyxTQUFTLEVBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsU0FBUyxFQUFFLE1BQU0sRUFBQyxHQUFHLE1BQU0sYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBUSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtRQUNwSSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPLEdBQUcsQ0FBQztRQUNyQyxPQUFPLENBQUMsTUFBTSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO0lBQzVFLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQXFCLENBQUMsQ0FBQyxDQUFDO0lBS3pGLE1BQU0sT0FBTyxHQUFHLEVBQUMsR0FBRyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUN6RSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDLE1BQU07UUFBRSxNQUFNLElBQUksb0NBQXFCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFELE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUMsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEQsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsSUFBSSxjQUFjLEdBQVEsU0FBUyxDQUFDO0lBQ3BDLElBQUksbUJBQW1CLEdBQXFCLFNBQVMsQ0FBQztJQUV0RCxVQUFJLEdBQUcsQ0FBQyxLQUFLLDBDQUFFLElBQUksRUFBRTtRQUNqQixjQUFjLEdBQUcsbUNBQXdCLE9BQUMsR0FBRyxDQUFDLEtBQUssMENBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0QsbUJBQW1CLEdBQUcsNENBQTZCLE9BQUMsR0FBRyxDQUFDLEtBQUssMENBQUUsSUFBSSxDQUFDLENBQUM7S0FDeEU7SUFDRCxNQUFNLElBQUksR0FBRztRQUNULEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixLQUFJLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxXQUFXLENBQUEsQ0FBQztZQUM3QyxDQUFDLENBQUMsRUFBQyxXQUFXLEVBQUUsbUJBQW1CLEtBQUksT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFdBQVcsQ0FBQSxFQUFDO1lBQzVELENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDWixDQUFDO0lBRUYsT0FBTztRQUNILEtBQUs7UUFDTCxNQUFNLEVBQUUsY0FBYyxJQUFJLE1BQU07UUFDaEMsVUFBVSxFQUFFO1lBQ1IsR0FBRyxVQUFVO1lBQ2IsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7U0FDeEI7UUFDRCxPQUFPLEVBQUUsSUFBSTtRQUNiLFdBQVcsRUFBRTtZQUNULEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7U0FDcEM7UUFDRCxXQUFXLEVBQUU7WUFDVCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1NBQ3BDO1FBQ0QsTUFBTSxFQUFFLFFBQVE7S0FDbkIsQ0FBQztBQUNOLENBQUM7QUEzREQsZ0NBMkRDO0FBRUQsa0JBQWUsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtvcmRlcn0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQge2N0eCwgUmVzb3VyY2VOb3RGb3VuZEVycm9yLCBkZXRlY3RDb250ZW50VHlwZUZyb21GaWxlTmFtZX0gZnJvbSBcIkBvaG9hcmVhdS9sYW1iZGEtdXRpbHNcIjtcbmltcG9ydCAqIGFzIGF2YWlsYWJsZVNvdXJjZVR5cGVzIGZyb20gXCIuLi9zb3VyY2VzXCI7XG5pbXBvcnQge2RldGVjdEZvcm1hdEZyb21GaWxlTmFtZX0gZnJvbSBcIkBvaG9hcmVhdS9pbWFnZW1hblwiO1xuaW1wb3J0ICogYXMgbW9kaWZpZXJzIGZyb20gXCIuLi9tb2RpZmllcnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkT3JkZXIoY3R4OiBjdHgpOiBQcm9taXNlPG9yZGVyPiB7XG5cbiAgICAvLyB0aGVuLCB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhpcyByZXF1ZXN0IGludG8gYW4gaW1hZ2VtYW4tY29tcGF0aWJsZSBvcmRlclxuICAgIC8vICh3aXRoIGEgbGlzdCBvZiBvcGVyYXRpb25zLCBpbnB1dCBsb2NhdGlvbiwgLi4uKS5cbiAgICAvLyBlc3NlbnRpYWxseSBkZXBlbmRpbmcgb24gdGhlIHJlcXVlc3QgdXJpIHdpdGggcGF0dGVybnMgdGhhdCBhcmUgZGV0ZWN0ZWQgYmFzZWQgb24gcnVsZXMgZnJvbSB0aGUgY29uZmlnLlxuXG4gICAgY29uc3QgbW9kaWZpZXJOYW1lcyA9IFtcbiAgICAgICAgJ3ByZXNldCcsICdzaXplJywgJ3RyaW0nLCAnZmxpcCcsICdmb3JtYXQnLCAncmFkaXVzJywgJ2ZpbHRlcicsXG4gICAgICAgICdyb3RhdGlvbicsICd0aGVtZScsICdjb2xvcicsICdxdWFsaXR5JyxcbiAgICBdO1xuXG4gICAgbGV0IHtpbnB1dCA9IHVuZGVmaW5lZCwgb3BlcmF0aW9ucyA9IFtdLCBvcHRpb25zID0gdW5kZWZpbmVkLCBmb3JtYXR9ID0gYXdhaXQgbW9kaWZpZXJOYW1lcy5yZWR1Y2UoYXN5bmMgKGFjYzogYW55LCBtb2RpZmllcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIGFjYyA9IGF3YWl0IGFjYztcbiAgICAgICAgaWYgKCFtb2RpZmllcnNbbW9kaWZpZXJdKSByZXR1cm4gYWNjO1xuICAgICAgICByZXR1cm4gKGF3YWl0IG1vZGlmaWVyc1ttb2RpZmllcl0oYWNjLCBjdHgucmVxdWVzdCwgY3R4LmNvbmZpZykpIHx8IGFjYztcbiAgICB9LCBQcm9taXNlLnJlc29sdmUoe2lucHV0OiB1bmRlZmluZWQsIG9wZXJhdGlvbnM6IFtdLCBvcHRpb25zOiB7fX0gYXMgdW5rbm93biBhcyBvcmRlcikpO1xuXG4gICAgLy8gd2UgYXJlIG5vdyByZWFkeSB0byBwcm9jZXNzIHRoZSBydWxlIGluIG9yZGVyIHRoZSBjb21wbGV0ZSB0aGUgY3JlYXRpb24gb2YgdGhlIG9yZGVyIHRoYXQgd2lsbCBjb250YWluXG4gICAgLy8gdGhlIGxpc3Qgb2Ygb3BlcmF0aW9ucyB0byBzZW5kIHRvIGltYWdlbWFuLlxuXG4gICAgY29uc3Qgc291cmNlcyA9IHsuLi5hdmFpbGFibGVTb3VyY2VUeXBlcywgLi4uKGN0eC5jb25maWcuc291cmNlcyB8fCB7fSl9O1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbY3R4LnF1ZXJ5LnNvdXJjZSB8fCAnZGVmYXVsdCddO1xuICAgIGlmICghc291cmNlKSB0aHJvdyBuZXcgUmVzb3VyY2VOb3RGb3VuZEVycm9yKGN0eC5yZXF1ZXN0KTtcbiAgICBjb25zdCBzb3VyY2VkID0gKGF3YWl0IHNvdXJjZShjdHgpKSB8fCB7fTtcbiAgICBzb3VyY2VkLmlucHV0ICYmIChpbnB1dCA9IHNvdXJjZWQuaW5wdXQpO1xuICAgIHNvdXJjZWQub3BlcmF0aW9ucyAmJiAob3BlcmF0aW9ucyA9IHNvdXJjZWQub3BlcmF0aW9ucyk7XG4gICAgc291cmNlZC5vcHRpb25zICYmIChvcHRpb25zID0gc291cmNlZC5vcHRpb25zKTtcbiAgICBzb3VyY2VkLmZvcm1hdCAmJiAoZm9ybWF0ID0gc291cmNlZC5mb3JtYXQpO1xuXG4gICAgbGV0IGZvcm1hdEZyb21GaWxlOiBhbnkgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGNvbnRlbnRUeXBlRnJvbUZpbGU6IHN0cmluZ3x1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3R4LnF1ZXJ5Py5maWxlKSB7XG4gICAgICAgIGZvcm1hdEZyb21GaWxlID0gZGV0ZWN0Rm9ybWF0RnJvbUZpbGVOYW1lKGN0eC5xdWVyeT8uZmlsZSk7XG4gICAgICAgIGNvbnRlbnRUeXBlRnJvbUZpbGUgPSBkZXRlY3RDb250ZW50VHlwZUZyb21GaWxlTmFtZShjdHgucXVlcnk/LmZpbGUpO1xuICAgIH1cbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIC4uLigoY29udGVudFR5cGVGcm9tRmlsZSB8fCBvcHRpb25zPy5jb250ZW50VHlwZSlcbiAgICAgICAgICAgID8ge2NvbnRlbnRUeXBlOiBjb250ZW50VHlwZUZyb21GaWxlIHx8IG9wdGlvbnM/LmNvbnRlbnRUeXBlfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0LFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdEZyb21GaWxlIHx8IGZvcm1hdCxcbiAgICAgICAgb3BlcmF0aW9uczogW1xuICAgICAgICAgICAgLi4ub3BlcmF0aW9ucyxcbiAgICAgICAgICAgIC4uLihvcGVyYXRpb25zIHx8IFtdKSxcbiAgICAgICAgXSxcbiAgICAgICAgb3B0aW9uczogb3B0cyxcbiAgICAgICAgc291cmNlVHlwZXM6IHtcbiAgICAgICAgICAgIC4uLihjdHguY29uZmlnLnNvdXJjZVR5cGVzIHx8IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFyZ2V0VHlwZXM6IHtcbiAgICAgICAgICAgIC4uLihjdHguY29uZmlnLnRhcmdldFR5cGVzIHx8IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgb3V0cHV0OiAnYnVmZmVyJyxcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZE9yZGVyIl19
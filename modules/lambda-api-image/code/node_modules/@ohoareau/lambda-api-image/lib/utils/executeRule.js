"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const availableRuleTypes = __importStar(require("../rule-types"));
const imageman_1 = require("@ohoareau/imageman");
const detectContentTypeFromFileName_1 = __importDefault(require("./detectContentTypeFromFileName"));
async function executeRule(rule, request, config) {
    var _a;
    const ruleTypes = { ...availableRuleTypes, ...(config.ruleTypes || {}) };
    const ruleType = ruleTypes[rule === null || rule === void 0 ? void 0 : rule.type];
    if (!ruleType)
        throw new Error(`Unknown rule type '${rule === null || rule === void 0 ? void 0 : rule.type}'`);
    const { input = undefined, operations = [], options = {}, format = undefined } = (await ruleType(request, rule, config)) || {};
    let formatFromFile = undefined;
    let contentTypeFromFile = undefined;
    if (!format && ((_a = rule === null || rule === void 0 ? void 0 : rule.params) === null || _a === void 0 ? void 0 : _a.file)) {
        formatFromFile = imageman_1.detectFormatFromFileName(rule.params.file);
        contentTypeFromFile = detectContentTypeFromFileName_1.default(rule.params.file);
    }
    const headers = { ...(rule.cache ? { 'Cache-Control': rule.cache } : {}) };
    const opts = {
        ...(options || {}),
        ...(((options === null || options === void 0 ? void 0 : options.contentType) || contentTypeFromFile)
            ? { contentType: contentTypeFromFile || (options === null || options === void 0 ? void 0 : options.contentType) }
            : {}),
    };
    return {
        input,
        operations,
        options: {
            ...opts,
            ...((opts.headers || headers) ? { headers: { ...(headers || {}), ...(opts.headers || {}) } } : {}),
        },
        format: format || formatFromFile,
    };
}
exports.executeRule = executeRule;
exports.default = executeRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZVJ1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvZXhlY3V0ZVJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0Esa0VBQW9EO0FBQ3BELGlEQUE0RDtBQUM1RCxvR0FBNEU7QUFFckUsS0FBSyxVQUFVLFdBQVcsQ0FBQyxJQUFVLEVBQUUsT0FBZ0IsRUFBRSxNQUFXOztJQUN2RSxNQUFNLFNBQVMsR0FBRyxFQUFDLEdBQUcsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUN2RSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxRQUFRO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksR0FBRyxDQUFDLENBQUM7SUFDcEUsTUFBTSxFQUFDLEtBQUssR0FBRyxTQUFTLEVBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxTQUFTLEVBQUMsR0FBRyxDQUFDLE1BQU0sUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0gsSUFBSSxjQUFjLEdBQVEsU0FBUyxDQUFDO0lBQ3BDLElBQUksbUJBQW1CLEdBQXFCLFNBQVMsQ0FBQztJQUN0RCxJQUFJLENBQUMsTUFBTSxXQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxNQUFNLDBDQUFFLElBQUksQ0FBQSxFQUFFO1FBQy9CLGNBQWMsR0FBRyxtQ0FBd0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELG1CQUFtQixHQUFHLHVDQUE2QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekU7SUFDRCxNQUFNLE9BQU8sR0FBRyxFQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFDdkUsTUFBTSxJQUFJLEdBQUc7UUFDVCxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxXQUFXLEtBQUksbUJBQW1CLENBQUM7WUFDekMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxFQUFFLG1CQUFtQixLQUFJLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxXQUFXLENBQUEsRUFBQztZQUM1RCxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ2hCLENBQUM7SUFDRixPQUFPO1FBQ0gsS0FBSztRQUNMLFVBQVU7UUFDVixPQUFPLEVBQUU7WUFDTCxHQUFHLElBQUk7WUFDUCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxFQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDakc7UUFDRCxNQUFNLEVBQUUsTUFBTSxJQUFJLGNBQWM7S0FDbkMsQ0FBQztBQUNOLENBQUM7QUEzQkQsa0NBMkJDO0FBRUQsa0JBQWUsV0FBVyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZXF1ZXN0LCBydWxlLCBvcmRlcn0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgKiBhcyBhdmFpbGFibGVSdWxlVHlwZXMgZnJvbSAnLi4vcnVsZS10eXBlcyc7XG5pbXBvcnQge2RldGVjdEZvcm1hdEZyb21GaWxlTmFtZX0gZnJvbSBcIkBvaG9hcmVhdS9pbWFnZW1hblwiO1xuaW1wb3J0IGRldGVjdENvbnRlbnRUeXBlRnJvbUZpbGVOYW1lIGZyb20gXCIuL2RldGVjdENvbnRlbnRUeXBlRnJvbUZpbGVOYW1lXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlUnVsZShydWxlOiBydWxlLCByZXF1ZXN0OiByZXF1ZXN0LCBjb25maWc6IGFueSk6IFByb21pc2U8b3JkZXI+IHtcbiAgICBjb25zdCBydWxlVHlwZXMgPSB7Li4uYXZhaWxhYmxlUnVsZVR5cGVzLCAuLi4oY29uZmlnLnJ1bGVUeXBlcyB8fCB7fSl9O1xuICAgIGNvbnN0IHJ1bGVUeXBlID0gcnVsZVR5cGVzW3J1bGU/LnR5cGVdO1xuICAgIGlmICghcnVsZVR5cGUpIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBydWxlIHR5cGUgJyR7cnVsZT8udHlwZX0nYCk7XG4gICAgY29uc3Qge2lucHV0ID0gdW5kZWZpbmVkLCBvcGVyYXRpb25zID0gW10sIG9wdGlvbnMgPSB7fSwgZm9ybWF0ID0gdW5kZWZpbmVkfSA9IChhd2FpdCBydWxlVHlwZShyZXF1ZXN0LCBydWxlLCBjb25maWcpKSB8fCB7fTtcbiAgICBsZXQgZm9ybWF0RnJvbUZpbGU6IGFueSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgY29udGVudFR5cGVGcm9tRmlsZTogc3RyaW5nfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIWZvcm1hdCAmJiBydWxlPy5wYXJhbXM/LmZpbGUpIHtcbiAgICAgICAgZm9ybWF0RnJvbUZpbGUgPSBkZXRlY3RGb3JtYXRGcm9tRmlsZU5hbWUocnVsZS5wYXJhbXMuZmlsZSk7XG4gICAgICAgIGNvbnRlbnRUeXBlRnJvbUZpbGUgPSBkZXRlY3RDb250ZW50VHlwZUZyb21GaWxlTmFtZShydWxlLnBhcmFtcy5maWxlKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVycyA9IHsuLi4ocnVsZS5jYWNoZSA/IHsnQ2FjaGUtQ29udHJvbCc6IHJ1bGUuY2FjaGV9IDoge30pfTtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIC4uLigob3B0aW9ucz8uY29udGVudFR5cGUgfHwgY29udGVudFR5cGVGcm9tRmlsZSlcbiAgICAgICAgICAgICAgICA/IHtjb250ZW50VHlwZTogY29udGVudFR5cGVGcm9tRmlsZSB8fCBvcHRpb25zPy5jb250ZW50VHlwZX1cbiAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0LFxuICAgICAgICBvcGVyYXRpb25zLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgLi4uKChvcHRzLmhlYWRlcnMgfHwgaGVhZGVycykgPyB7aGVhZGVyczogey4uLihoZWFkZXJzIHx8IHt9KSwgLi4uKG9wdHMuaGVhZGVycyB8fCB7fSl9fSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgZm9ybWF0RnJvbUZpbGUsXG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhlY3V0ZVJ1bGUiXX0=
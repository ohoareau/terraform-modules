"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lambda_utils_1 = require("@ohoareau/lambda-utils");
const mapping = {
    icon: '16x16',
    'fb-profile': '180x180',
    'fb-cover': '828x315',
    'fb-shared-image': '1200x630',
    'fb-shared-link': '1200x627',
    'fb-highlighted-image': '1200x717',
    'in-bg-image': '1000x425',
    'in-standard-logo': '100x60',
    'in-profile-image': '400x400',
    'in-career-cover-photo': '974x300',
    'in-banner-image': '646x200',
    'in-square-logo': '50x50',
    'yt-channel-cover-photo': '2560x1440',
    'yt-video-upload': '1280x760',
    'ig-profile-image': '110x110',
    'ig-photo-thumbnail': '161x161',
    'ig-photo-size': '1080x1080',
    'tw-header-photo': '1500x500',
    'tw-profile-photo': '400x400',
    'tw-in-stream-photo': '440x220',
    'pi-profile-image': '165x165',
    'pi-board-display': '222x150',
    'pi-board-display-small': '55x55',
    'pi-pin-size': '236x',
};
async function size(order, request) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let size = (_a = request.qsParams) === null || _a === void 0 ? void 0 : _a.size;
    if (!size)
        return;
    if (Array.isArray(size))
        size = size[0];
    if (!size)
        return;
    size = mapping[size] || size;
    if (!size)
        return;
    const [width = undefined, height = undefined] = size.split('x');
    const fit = lambda_utils_1.filterValues((_b = request.qsParams) === null || _b === void 0 ? void 0 : _b.size_fit, ['cover', 'contain', 'fill', 'inside', 'outside']);
    const position = lambda_utils_1.filterValues((_c = request.qsParams) === null || _c === void 0 ? void 0 : _c.size_position, ['top', 'right-top', 'right', 'right-bottom', 'bottom', 'left-bottom', 'left', 'left-top'], 'space');
    const gravity = lambda_utils_1.filterValues((_d = request.qsParams) === null || _d === void 0 ? void 0 : _d.size_gravity, ['north', 'northeast', 'east', 'southeast', 'south', 'southwest', 'west', 'northwest', 'center', 'centre']);
    const strategy = lambda_utils_1.filterValues((_e = request.qsParams) === null || _e === void 0 ? void 0 : _e.size_strategy, ['entropy', 'attention']);
    const background = (_f = request.qsParams) === null || _f === void 0 ? void 0 : _f.size_background;
    const kernel = lambda_utils_1.filterValues((_g = request.qsParams) === null || _g === void 0 ? void 0 : _g.size_kernel, ['nearest', 'cubic', 'mitchell', 'lanczos2', 'lanczos3']);
    const withoutEnlargement = lambda_utils_1.filterValues((_h = request.qsParams) === null || _h === void 0 ? void 0 : _h.size_enlargement, ['0', '1', 'false', 'true', 'none', 'no', 'yes'], 'boolean');
    const fastShrinkOnLoad = lambda_utils_1.filterValues((_j = request.qsParams) === null || _j === void 0 ? void 0 : _j.size_fastshrink, ['0', '1', 'false', 'true', 'none', 'no', 'yes'], 'boolean');
    order.operations.push({
        type: 'resize',
        width: !!width ? width : undefined,
        height: !!height ? height : undefined,
        ...(fit ? { fit } : {}),
        ...(position ? { position } : {}),
        ...(gravity ? { gravity } : {}),
        ...(strategy ? { strategy } : {}),
        ...(background ? { background } : {}),
        ...(kernel ? { kernel } : {}),
        ...(withoutEnlargement ? { withoutEnlargement } : {}),
        ...(fastShrinkOnLoad ? { fastShrinkOnLoad } : {}),
    });
}
exports.size = size;
//# sourceMappingURL=data:application/json;base64,